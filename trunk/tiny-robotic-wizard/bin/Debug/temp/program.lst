
C:\Users\vaio\Documents\Visual Studio 2008\Projects\tiny-robotic-wizard\tiny-robotic-wizard\bin\Debug\temp\program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000020  00800100  00800100  000002de  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000016d  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f9  00000000  00000000  0000046b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000105  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e8  00000000  00000000  00000869  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  00000b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000017a  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 32       	cpi	r26, 0x20	; 32
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	6a d0       	rcall	.+212    	; 0x126 <main>
  52:	09 c1       	rjmp	.+530    	; 0x266 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <update_DistanceSensor>:
/*貂ｬ霍昴そ繝ｳ繧ｵ*/
int DistanceSensor;

void update_DistanceSensor(void){
	return;
}
  56:	08 95       	ret

00000058 <initialize_DistanceSensor>:

void initialize_DistanceSensor(void){
	update_DistanceSensor();
	return;
}
  58:	08 95       	ret

0000005a <update_LineSensor>:
/*繝ｩ繧､繝ｳ繧ｻ繝ｳ繧ｵ*/
int LineSensor;

void update_LineSensor(void){
	return;
}
  5a:	08 95       	ret

0000005c <initialize_LineSensor>:

void initialize_LineSensor(void){
	update_LineSensor();
	return;
}
  5c:	08 95       	ret

0000005e <black>:
/*LED*/
void (*LED[8])(void);

void black(void){
	return;
}
  5e:	08 95       	ret

00000060 <blue>:

void blue(void){
	return;
}
  60:	08 95       	ret

00000062 <green>:

void green(void){
	return;
}
  62:	08 95       	ret

00000064 <cyan>:

void cyan(void){
	return;
}
  64:	08 95       	ret

00000066 <red>:

void red(void){
	return;
}
  66:	08 95       	ret

00000068 <magenta>:

void magenta(void){
	return;
}
  68:	08 95       	ret

0000006a <yellow>:

void yellow(void){
	return;
}
  6a:	08 95       	ret

0000006c <white>:

void white(void){
	return;
}
  6c:	08 95       	ret

0000006e <initialize_LED>:

void initialize_LED(void){
	LED[0] = black;
  6e:	8f e2       	ldi	r24, 0x2F	; 47
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	90 93 11 01 	sts	0x0111, r25
  76:	80 93 10 01 	sts	0x0110, r24
	LED[1] = blue;
  7a:	80 e3       	ldi	r24, 0x30	; 48
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	90 93 13 01 	sts	0x0113, r25
  82:	80 93 12 01 	sts	0x0112, r24
	LED[2] = green;
  86:	81 e3       	ldi	r24, 0x31	; 49
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	90 93 15 01 	sts	0x0115, r25
  8e:	80 93 14 01 	sts	0x0114, r24
	LED[3] = cyan;
  92:	82 e3       	ldi	r24, 0x32	; 50
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	90 93 17 01 	sts	0x0117, r25
  9a:	80 93 16 01 	sts	0x0116, r24
	LED[4] = red;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 93 19 01 	sts	0x0119, r25
  a6:	80 93 18 01 	sts	0x0118, r24
	LED[5] = magenta;
  aa:	84 e3       	ldi	r24, 0x34	; 52
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 1b 01 	sts	0x011B, r25
  b2:	80 93 1a 01 	sts	0x011A, r24
	LED[6] = yellow;
  b6:	85 e3       	ldi	r24, 0x35	; 53
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 1d 01 	sts	0x011D, r25
  be:	80 93 1c 01 	sts	0x011C, r24
	LED[7] = white;
  c2:	86 e3       	ldi	r24, 0x36	; 54
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 1f 01 	sts	0x011F, r25
  ca:	80 93 1e 01 	sts	0x011E, r24
	return;
}
  ce:	08 95       	ret

000000d0 <nop>:
/*遘ｻ蜍・/
void (*Ambulation[6])(void);

void nop(void){
	return;
}
  d0:	08 95       	ret

000000d2 <forward>:

void forward(void){
	return;
}
  d2:	08 95       	ret

000000d4 <back>:

void back(void){
	return;
}
  d4:	08 95       	ret

000000d6 <cw>:

void cw(void){
	return;
}
  d6:	08 95       	ret

000000d8 <ccw>:

void ccw(void){
	return;
}
  d8:	08 95       	ret

000000da <stop>:

void stop(void){
	return;
}
  da:	08 95       	ret

000000dc <initialize_Ambulation>:

void initialize_Ambulation(void){
	Ambulation[0] = nop;
  dc:	88 e6       	ldi	r24, 0x68	; 104
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	90 93 03 01 	sts	0x0103, r25
  e4:	80 93 02 01 	sts	0x0102, r24
	Ambulation[1] = forward;
  e8:	89 e6       	ldi	r24, 0x69	; 105
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 05 01 	sts	0x0105, r25
  f0:	80 93 04 01 	sts	0x0104, r24
	Ambulation[2] = back;
  f4:	8a e6       	ldi	r24, 0x6A	; 106
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	90 93 07 01 	sts	0x0107, r25
  fc:	80 93 06 01 	sts	0x0106, r24
	Ambulation[3] = cw;
 100:	8b e6       	ldi	r24, 0x6B	; 107
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 09 01 	sts	0x0109, r25
 108:	80 93 08 01 	sts	0x0108, r24
	Ambulation[4] = ccw;
 10c:	8c e6       	ldi	r24, 0x6C	; 108
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	90 93 0b 01 	sts	0x010B, r25
 114:	80 93 0a 01 	sts	0x010A, r24
	Ambulation[5] = stop;
 118:	8d e6       	ldi	r24, 0x6D	; 109
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 0d 01 	sts	0x010D, r25
 120:	80 93 0c 01 	sts	0x010C, r24
	return;
}
 124:	08 95       	ret

00000126 <main>:

int main(void){
 126:	ef 92       	push	r14
 128:	ff 92       	push	r15
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	68 97       	sbiw	r28, 0x18	; 24
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
void white(void){
	return;
}

void initialize_LED(void){
	LED[0] = black;
 142:	4f e2       	ldi	r20, 0x2F	; 47
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	50 93 11 01 	sts	0x0111, r21
 14a:	40 93 10 01 	sts	0x0110, r20
	LED[1] = blue;
 14e:	80 e3       	ldi	r24, 0x30	; 48
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 13 01 	sts	0x0113, r25
 156:	80 93 12 01 	sts	0x0112, r24
	LED[2] = green;
 15a:	81 e3       	ldi	r24, 0x31	; 49
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 15 01 	sts	0x0115, r25
 162:	80 93 14 01 	sts	0x0114, r24
	LED[3] = cyan;
 166:	82 e3       	ldi	r24, 0x32	; 50
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 17 01 	sts	0x0117, r25
 16e:	80 93 16 01 	sts	0x0116, r24
	LED[4] = red;
 172:	83 e3       	ldi	r24, 0x33	; 51
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	90 93 19 01 	sts	0x0119, r25
 17a:	80 93 18 01 	sts	0x0118, r24
	LED[5] = magenta;
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 1b 01 	sts	0x011B, r25
 186:	80 93 1a 01 	sts	0x011A, r24
	LED[6] = yellow;
 18a:	85 e3       	ldi	r24, 0x35	; 53
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	90 93 1d 01 	sts	0x011D, r25
 192:	80 93 1c 01 	sts	0x011C, r24
	LED[7] = white;
 196:	86 e3       	ldi	r24, 0x36	; 54
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 1f 01 	sts	0x011F, r25
 19e:	80 93 1e 01 	sts	0x011E, r24
void stop(void){
	return;
}

void initialize_Ambulation(void){
	Ambulation[0] = nop;
 1a2:	28 e6       	ldi	r18, 0x68	; 104
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	30 93 03 01 	sts	0x0103, r19
 1aa:	20 93 02 01 	sts	0x0102, r18
	Ambulation[1] = forward;
 1ae:	89 e6       	ldi	r24, 0x69	; 105
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 05 01 	sts	0x0105, r25
 1b6:	80 93 04 01 	sts	0x0104, r24
	Ambulation[2] = back;
 1ba:	8a e6       	ldi	r24, 0x6A	; 106
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	90 93 07 01 	sts	0x0107, r25
 1c2:	80 93 06 01 	sts	0x0106, r24
	Ambulation[3] = cw;
 1c6:	8b e6       	ldi	r24, 0x6B	; 107
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 09 01 	sts	0x0109, r25
 1ce:	80 93 08 01 	sts	0x0108, r24
	Ambulation[4] = ccw;
 1d2:	8c e6       	ldi	r24, 0x6C	; 108
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	90 93 0b 01 	sts	0x010B, r25
 1da:	80 93 0a 01 	sts	0x010A, r24
	Ambulation[5] = stop;
 1de:	8d e6       	ldi	r24, 0x6D	; 109
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 0d 01 	sts	0x010D, r25
 1e6:	80 93 0c 01 	sts	0x010C, r24
initialize_LineSensor();
/* action縺ｮ蛻晄悄蛹・*/
initialize_LED();
initialize_Ambulation();
/* action縺ｮ髢｢謨ｰ繝昴う繝ｳ繧ｿ縺ｮ蛻晄悄蛹・*/
action[0][0][0] = LED[0];
 1ea:	5a 83       	std	Y+2, r21	; 0x02
 1ec:	49 83       	std	Y+1, r20	; 0x01
action[0][0][1] = Ambulation[0];
 1ee:	3c 83       	std	Y+4, r19	; 0x04
 1f0:	2b 83       	std	Y+3, r18	; 0x03
action[1][0][0] = LED[0];
 1f2:	5a 87       	std	Y+10, r21	; 0x0a
 1f4:	49 87       	std	Y+9, r20	; 0x09
action[1][0][1] = Ambulation[0];
 1f6:	3c 87       	std	Y+12, r19	; 0x0c
 1f8:	2b 87       	std	Y+11, r18	; 0x0b
action[2][0][0] = LED[0];
 1fa:	5a 8b       	std	Y+18, r21	; 0x12
 1fc:	49 8b       	std	Y+17, r20	; 0x11
action[2][0][1] = Ambulation[0];
 1fe:	3c 8b       	std	Y+20, r19	; 0x14
 200:	2b 8b       	std	Y+19, r18	; 0x13
action[0][1][0] = LED[0];
 202:	5e 83       	std	Y+6, r21	; 0x06
 204:	4d 83       	std	Y+5, r20	; 0x05
action[0][1][1] = Ambulation[0];
 206:	38 87       	std	Y+8, r19	; 0x08
 208:	2f 83       	std	Y+7, r18	; 0x07
action[1][1][0] = LED[0];
 20a:	5e 87       	std	Y+14, r21	; 0x0e
 20c:	4d 87       	std	Y+13, r20	; 0x0d
action[1][1][1] = Ambulation[0];
 20e:	38 8b       	std	Y+16, r19	; 0x10
 210:	2f 87       	std	Y+15, r18	; 0x0f
action[2][1][0] = LED[0];
 212:	5e 8b       	std	Y+22, r21	; 0x16
 214:	4d 8b       	std	Y+21, r20	; 0x15
action[2][1][1] = Ambulation[0];
 216:	38 8f       	std	Y+24, r19	; 0x18
 218:	2f 8b       	std	Y+23, r18	; 0x17
 21a:	00 e0       	ldi	r16, 0x00	; 0
 21c:	10 e0       	ldi	r17, 0x00	; 0
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_DistanceSensor();
update_LineSensor();
for(w = 0; w <= 1; w++){
(*action[DistanceSensor][LineSensor][w])();
 21e:	7e 01       	movw	r14, r28
 220:	08 94       	sec
 222:	e1 1c       	adc	r14, r1
 224:	f1 1c       	adc	r15, r1
 226:	e0 91 0e 01 	lds	r30, 0x010E
 22a:	f0 91 0f 01 	lds	r31, 0x010F
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	80 91 00 01 	lds	r24, 0x0100
 236:	90 91 01 01 	lds	r25, 0x0101
 23a:	e8 0f       	add	r30, r24
 23c:	f9 1f       	adc	r31, r25
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 0f       	add	r30, r16
 244:	f1 1f       	adc	r31, r17
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ee 0d       	add	r30, r14
 24c:	ff 1d       	adc	r31, r15
 24e:	01 90       	ld	r0, Z+
 250:	f0 81       	ld	r31, Z
 252:	e0 2d       	mov	r30, r0
 254:	09 95       	icall
action[2][1][1] = Ambulation[0];
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_DistanceSensor();
update_LineSensor();
for(w = 0; w <= 1; w++){
 256:	0f 5f       	subi	r16, 0xFF	; 255
 258:	1f 4f       	sbci	r17, 0xFF	; 255
 25a:	01 30       	cpi	r16, 0x01	; 1
 25c:	11 05       	cpc	r17, r1
 25e:	19 f3       	breq	.-58     	; 0x226 <main+0x100>
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	e0 cf       	rjmp	.-64     	; 0x226 <main+0x100>

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
