
C:\Users\vaio\Documents\Visual Studio 2008\Projects\tiny-robotic-wizard\tiny-robotic-wizard\bin\Debug\temp\program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000025  00800100  00800100  00000558  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000016d  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000391  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016e  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005d7  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000160  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018f  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000053  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 32       	cpi	r26, 0x25	; 37
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	4f d1       	rcall	.+670    	; 0x2f0 <main>
  52:	46 c2       	rjmp	.+1164   	; 0x4e0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <update_DistanceSensor>:

void update_DistanceSensor(void){
	static uint8_t data[4] = {0, 0, 0, 0}, counter = 0;
	uint8_t i, max;
	// AD螟画鋤
	ADCSRA |= _BV(ADSC);							/* AD螟画鋤髢句ｧ・*/
  56:	80 91 7a 00 	lds	r24, 0x007A
  5a:	80 64       	ori	r24, 0x40	; 64
  5c:	80 93 7a 00 	sts	0x007A, r24
	while(ADCSRA & _BV(ADSC));						/* AD螟画鋤螳御ｺ・ｾ・■ */
  60:	80 91 7a 00 	lds	r24, 0x007A
  64:	86 fd       	sbrc	r24, 6
  66:	fc cf       	rjmp	.-8      	; 0x60 <update_DistanceSensor+0xa>
	
	// AD螟画鋤蛟､縺ｫ蠢懊§縺ｦ霑斐☆謨ｰ蛟､繧剃ｻ倥￠繧・
	if(110 < ADCH){
  68:	80 91 79 00 	lds	r24, 0x0079
  6c:	8f 36       	cpi	r24, 0x6F	; 111
  6e:	30 f0       	brcs	.+12     	; 0x7c <update_DistanceSensor+0x26>
		data[1]++;									/* 霑代＞ */
  70:	80 91 02 01 	lds	r24, 0x0102
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	80 93 02 01 	sts	0x0102, r24
  7a:	19 c0       	rjmp	.+50     	; 0xae <update_DistanceSensor+0x58>
	}else if(55 < ADCH){
  7c:	80 91 79 00 	lds	r24, 0x0079
  80:	88 33       	cpi	r24, 0x38	; 56
  82:	30 f0       	brcs	.+12     	; 0x90 <update_DistanceSensor+0x3a>
		data[2]++;									/* 荳ｭ縺上ｉ縺・*/
  84:	80 91 03 01 	lds	r24, 0x0103
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	80 93 03 01 	sts	0x0103, r24
  8e:	0f c0       	rjmp	.+30     	; 0xae <update_DistanceSensor+0x58>
	}else if(40 < ADCH){
  90:	80 91 79 00 	lds	r24, 0x0079
  94:	89 32       	cpi	r24, 0x29	; 41
  96:	30 f0       	brcs	.+12     	; 0xa4 <update_DistanceSensor+0x4e>
		data[3]++;									/* 驕縺・*/
  98:	80 91 04 01 	lds	r24, 0x0104
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 04 01 	sts	0x0104, r24
  a2:	05 c0       	rjmp	.+10     	; 0xae <update_DistanceSensor+0x58>
	}else{
		data[0]++;									/* 隕九≠縺溘ｉ縺ｪ縺・*/
  a4:	80 91 01 01 	lds	r24, 0x0101
  a8:	8f 5f       	subi	r24, 0xFF	; 255
  aa:	80 93 01 01 	sts	0x0101, r24
	}
	if(++counter == 10){
  ae:	80 91 00 01 	lds	r24, 0x0100
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 00 01 	sts	0x0100, r24
  b8:	8a 30       	cpi	r24, 0x0A	; 10
  ba:	11 f5       	brne	.+68     	; 0x100 <update_DistanceSensor+0xaa>
		counter = 0;
  bc:	10 92 00 01 	sts	0x0100, r1
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
		max = 0;
		for(i = 0; i <= 4 - 1; i++){
			if( data[max] < data[i]){
  c6:	e4 2f       	mov	r30, r20
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ef 5f       	subi	r30, 0xFF	; 255
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	d9 01       	movw	r26, r18
  d0:	af 5f       	subi	r26, 0xFF	; 255
  d2:	be 4f       	sbci	r27, 0xFE	; 254
  d4:	90 81       	ld	r25, Z
  d6:	8c 91       	ld	r24, X
  d8:	98 17       	cp	r25, r24
  da:	08 f4       	brcc	.+2      	; 0xde <update_DistanceSensor+0x88>
  dc:	42 2f       	mov	r20, r18
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
		data[0]++;									/* 隕九≠縺溘ｉ縺ｪ縺・*/
	}
	if(++counter == 10){
		counter = 0;
		max = 0;
		for(i = 0; i <= 4 - 1; i++){
  e2:	24 30       	cpi	r18, 0x04	; 4
  e4:	31 05       	cpc	r19, r1
  e6:	79 f7       	brne	.-34     	; 0xc6 <update_DistanceSensor+0x70>
			if( data[max] < data[i]){
				max = i;
			}
		}
		DistanceSensor = max;
  e8:	40 93 13 01 	sts	0x0113, r20
  ec:	10 92 14 01 	sts	0x0114, r1
		for(i = 0; i <= 4 - 1; i++){
			data[i] = 0;
  f0:	10 92 01 01 	sts	0x0101, r1
  f4:	10 92 02 01 	sts	0x0102, r1
  f8:	10 92 03 01 	sts	0x0103, r1
  fc:	10 92 04 01 	sts	0x0104, r1
 100:	08 95       	ret

00000102 <initialize_DistanceSensor>:
	return;
}

void initialize_DistanceSensor(void){
	// ADC蛻晄悄蛹・
	ADMUX &= ~_BV(REFS1), ADMUX |= _BV(REFS0);		/* AVCC繧貞渕貅夜崕蝨ｧ縺ｫ縺吶ｋ */
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 77       	andi	r24, 0x7F	; 127
 10a:	80 83       	st	Z, r24
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
	ADMUX |= _BV(ADLAR);							/* 螟画鋤邨先棡縺ｯ蟾ｦ隧ｰ */
 112:	80 81       	ld	r24, Z
 114:	80 62       	ori	r24, 0x20	; 32
 116:	80 83       	st	Z, r24
	ADMUX &= 0xF0, ADMUX |= 0x00;					/* 繝√Ε繝ｳ繝阪Ν驕ｸ謚橸ｼ医％縺ｮ蝣ｴ蜷医・ADC0・・*/
 118:	80 81       	ld	r24, Z
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	80 83       	st	Z, r24
 11e:	80 81       	ld	r24, Z
 120:	80 83       	st	Z, r24

	ADCSRA |= _BV(ADEN);							/* ADC繧定ｨｱ蜿ｯ */
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	80 83       	st	Z, r24
	ADCSRA &= ~_BV(ADATE);							/* ADC縺ｮ閾ｪ蜍戊ｵｷ蜍慕ｦ∵ｭ｢ */
 12c:	80 81       	ld	r24, Z
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	80 83       	st	Z, r24

	DIDR0 |= _BV(ADC0D);							/* ADC0縺ｮ繝・ず繧ｿ繝ｫ蜈･蜉帷ｦ∵ｭ｢ */
 132:	ae e7       	ldi	r26, 0x7E	; 126
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	8c 91       	ld	r24, X
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	8c 93       	st	X, r24

	ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);	/* 繝励Μ繧ｹ繧ｱ繝ｼ繝ｩ險ｭ螳・*/
 13c:	80 81       	ld	r24, Z
 13e:	87 60       	ori	r24, 0x07	; 7
 140:	80 83       	st	Z, r24

	DistanceSensor = 0;
 142:	10 92 14 01 	sts	0x0114, r1
 146:	10 92 13 01 	sts	0x0113, r1

	return;
}
 14a:	08 95       	ret

0000014c <update_LineSensor>:
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS1))?2:0) | ((LSPORT&_BV(LS0))?1:0);
 14c:	35 99       	sbic	0x06, 5	; 6
 14e:	03 c0       	rjmp	.+6      	; 0x156 <update_LineSensor+0xa>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <update_LineSensor+0xe>
 156:	22 e0       	ldi	r18, 0x02	; 2
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	86 b1       	in	r24, 0x06	; 6
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	44 e0       	ldi	r20, 0x04	; 4
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	4a 95       	dec	r20
 166:	e1 f7       	brne	.-8      	; 0x160 <update_LineSensor+0x14>
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	90 70       	andi	r25, 0x00	; 0
 16c:	28 2b       	or	r18, r24
 16e:	39 2b       	or	r19, r25
 170:	30 93 06 01 	sts	0x0106, r19
 174:	20 93 05 01 	sts	0x0105, r18
	return;
}
 178:	08 95       	ret

0000017a <initialize_LineSensor>:

void initialize_LineSensor(void){
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	8f 7c       	andi	r24, 0xCF	; 207
 17e:	87 b9       	out	0x07, r24	; 7
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS1))?2:0) | ((LSPORT&_BV(LS0))?1:0);
 180:	35 99       	sbic	0x06, 5	; 6
 182:	03 c0       	rjmp	.+6      	; 0x18a <initialize_LineSensor+0x10>
 184:	20 e0       	ldi	r18, 0x00	; 0
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <initialize_LineSensor+0x14>
 18a:	22 e0       	ldi	r18, 0x02	; 2
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	86 b1       	in	r24, 0x06	; 6
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	54 e0       	ldi	r21, 0x04	; 4
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	5a 95       	dec	r21
 19a:	e1 f7       	brne	.-8      	; 0x194 <initialize_LineSensor+0x1a>
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	90 70       	andi	r25, 0x00	; 0
 1a0:	28 2b       	or	r18, r24
 1a2:	39 2b       	or	r19, r25
 1a4:	30 93 06 01 	sts	0x0106, r19
 1a8:	20 93 05 01 	sts	0x0105, r18
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);

	update_LineSensor();

	return;
}
 1ac:	08 95       	ret

000001ae <black>:
#define RED _BV(PB2)

void (*LED[8])(void);

void black(void){
	LEDPORT &= ~RED & ~GREEN & ~BLUE;
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	8b 7c       	andi	r24, 0xCB	; 203
 1b2:	85 b9       	out	0x05, r24	; 5
	return;
}
 1b4:	08 95       	ret

000001b6 <blue>:

void blue(void){
	LEDPORT &= ~RED & ~GREEN;
 1b6:	85 b1       	in	r24, 0x05	; 5
 1b8:	8b 7d       	andi	r24, 0xDB	; 219
 1ba:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= BLUE;
 1bc:	2c 9a       	sbi	0x05, 4	; 5
	return;
}
 1be:	08 95       	ret

000001c0 <green>:

void green(void){
	LEDPORT &= ~RED & ~BLUE;
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	8b 7e       	andi	r24, 0xEB	; 235
 1c4:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= GREEN;
 1c6:	2d 9a       	sbi	0x05, 5	; 5
	return;
}
 1c8:	08 95       	ret

000001ca <cyan>:

void cyan(void){
	LEDPORT &= ~RED;
 1ca:	2a 98       	cbi	0x05, 2	; 5
	LEDPORT |= GREEN | BLUE;
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	80 63       	ori	r24, 0x30	; 48
 1d0:	85 b9       	out	0x05, r24	; 5
	return;
}
 1d2:	08 95       	ret

000001d4 <red>:

void red(void){
	LEDPORT &= ~GREEN & ~BLUE;
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	8f 7c       	andi	r24, 0xCF	; 207
 1d8:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= RED;
 1da:	2a 9a       	sbi	0x05, 2	; 5
	return;
}
 1dc:	08 95       	ret

000001de <magenta>:

void magenta(void){
	LEDPORT &= ~GREEN;
 1de:	2d 98       	cbi	0x05, 5	; 5
	LEDPORT |= RED | BLUE;
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	84 61       	ori	r24, 0x14	; 20
 1e4:	85 b9       	out	0x05, r24	; 5
	return;
}
 1e6:	08 95       	ret

000001e8 <yellow>:

void yellow(void){
	LEDPORT &= ~BLUE;
 1e8:	2c 98       	cbi	0x05, 4	; 5
	LEDPORT |= RED | GREEN;
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	84 62       	ori	r24, 0x24	; 36
 1ee:	85 b9       	out	0x05, r24	; 5
	return;
}
 1f0:	08 95       	ret

000001f2 <white>:

void white(void){
	LEDPORT |= RED | GREEN | BLUE;
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	84 63       	ori	r24, 0x34	; 52
 1f6:	85 b9       	out	0x05, r24	; 5
	return;
}
 1f8:	08 95       	ret

000001fa <initialize_LED>:

void initialize_LED(void){
	LEDDDR |= RED | GREEN | BLUE;
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	84 63       	ori	r24, 0x34	; 52
 1fe:	84 b9       	out	0x04, r24	; 4

	LED[0] = black;
 200:	87 ed       	ldi	r24, 0xD7	; 215
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	90 93 16 01 	sts	0x0116, r25
 208:	80 93 15 01 	sts	0x0115, r24
	LED[1] = blue;
 20c:	8b ed       	ldi	r24, 0xDB	; 219
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	90 93 18 01 	sts	0x0118, r25
 214:	80 93 17 01 	sts	0x0117, r24
	LED[2] = green;
 218:	80 ee       	ldi	r24, 0xE0	; 224
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 1a 01 	sts	0x011A, r25
 220:	80 93 19 01 	sts	0x0119, r24
	LED[3] = cyan;
 224:	85 ee       	ldi	r24, 0xE5	; 229
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	90 93 1c 01 	sts	0x011C, r25
 22c:	80 93 1b 01 	sts	0x011B, r24
	LED[4] = red;
 230:	8a ee       	ldi	r24, 0xEA	; 234
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 1e 01 	sts	0x011E, r25
 238:	80 93 1d 01 	sts	0x011D, r24
	LED[5] = magenta;
 23c:	8f ee       	ldi	r24, 0xEF	; 239
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 20 01 	sts	0x0120, r25
 244:	80 93 1f 01 	sts	0x011F, r24
	LED[6] = yellow;
 248:	84 ef       	ldi	r24, 0xF4	; 244
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	90 93 22 01 	sts	0x0122, r25
 250:	80 93 21 01 	sts	0x0121, r24
	LED[7] = white;
 254:	89 ef       	ldi	r24, 0xF9	; 249
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 24 01 	sts	0x0124, r25
 25c:	80 93 23 01 	sts	0x0123, r24
	return;
}
 260:	08 95       	ret

00000262 <nop>:

void (*Ambulation[6])(void);

void nop(void){
	return;
}
 262:	08 95       	ret

00000264 <forward>:

void forward(void){
	LF();
 264:	5e 98       	cbi	0x0b, 6	; 11
 266:	5d 9a       	sbi	0x0b, 5	; 11
	RF();
 268:	5f 98       	cbi	0x0b, 7	; 11
 26a:	28 9a       	sbi	0x05, 0	; 5

	return;
}
 26c:	08 95       	ret

0000026e <back>:

void back(void){
	LB();
 26e:	5e 9a       	sbi	0x0b, 6	; 11
 270:	5d 98       	cbi	0x0b, 5	; 11
	RB();
 272:	5f 9a       	sbi	0x0b, 7	; 11
 274:	28 98       	cbi	0x05, 0	; 5

	return;
}
 276:	08 95       	ret

00000278 <cw>:

void cw(void){
	LF();
 278:	5e 98       	cbi	0x0b, 6	; 11
 27a:	5d 9a       	sbi	0x0b, 5	; 11
	RB();
 27c:	5f 9a       	sbi	0x0b, 7	; 11
 27e:	28 98       	cbi	0x05, 0	; 5

	return;
}
 280:	08 95       	ret

00000282 <ccw>:

void ccw(void){
	LB();
 282:	5e 9a       	sbi	0x0b, 6	; 11
 284:	5d 98       	cbi	0x0b, 5	; 11
	RF();
 286:	5f 98       	cbi	0x0b, 7	; 11
 288:	28 9a       	sbi	0x05, 0	; 5

	return;
}
 28a:	08 95       	ret

0000028c <stop>:

void stop(void){
	PORTD &= ~_BV(PD6), PORTD &= ~_BV(PD5);
 28c:	5e 98       	cbi	0x0b, 6	; 11
 28e:	5d 98       	cbi	0x0b, 5	; 11
	PORTB &= ~_BV(PD7), PORTB &= ~_BV(PB0);
 290:	2f 98       	cbi	0x05, 7	; 5
 292:	28 98       	cbi	0x05, 0	; 5
	return;
}
 294:	08 95       	ret

00000296 <initialize_Ambulation>:

void initialize_Ambulation(void){
	DDRD |= _BV(PD7) | _BV(PD6) | _BV(PD5);
 296:	8a b1       	in	r24, 0x0a	; 10
 298:	80 6e       	ori	r24, 0xE0	; 224
 29a:	8a b9       	out	0x0a, r24	; 10
	DDRB |= _BV(PB0);
 29c:	20 9a       	sbi	0x04, 0	; 4

	return;
}

void stop(void){
	PORTD &= ~_BV(PD6), PORTD &= ~_BV(PD5);
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	5d 98       	cbi	0x0b, 5	; 11
	PORTB &= ~_BV(PD7), PORTB &= ~_BV(PB0);
 2a2:	2f 98       	cbi	0x05, 7	; 5
 2a4:	28 98       	cbi	0x05, 0	; 5
	DDRD |= _BV(PD7) | _BV(PD6) | _BV(PD5);
	DDRB |= _BV(PB0);

	stop();

	Ambulation[0] = nop;
 2a6:	81 e3       	ldi	r24, 0x31	; 49
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	90 93 08 01 	sts	0x0108, r25
 2ae:	80 93 07 01 	sts	0x0107, r24
	Ambulation[1] = forward;
 2b2:	82 e3       	ldi	r24, 0x32	; 50
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	90 93 0a 01 	sts	0x010A, r25
 2ba:	80 93 09 01 	sts	0x0109, r24
	Ambulation[2] = back;
 2be:	87 e3       	ldi	r24, 0x37	; 55
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	90 93 0c 01 	sts	0x010C, r25
 2c6:	80 93 0b 01 	sts	0x010B, r24
	Ambulation[3] = cw;
 2ca:	8c e3       	ldi	r24, 0x3C	; 60
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	90 93 0e 01 	sts	0x010E, r25
 2d2:	80 93 0d 01 	sts	0x010D, r24
	Ambulation[4] = ccw;
 2d6:	81 e4       	ldi	r24, 0x41	; 65
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	90 93 10 01 	sts	0x0110, r25
 2de:	80 93 0f 01 	sts	0x010F, r24
	Ambulation[5] = stop;
 2e2:	86 e4       	ldi	r24, 0x46	; 70
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	90 93 12 01 	sts	0x0112, r25
 2ea:	80 93 11 01 	sts	0x0111, r24

	return;
}
 2ee:	08 95       	ret

000002f0 <main>:

int main(void){
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	df 93       	push	r29
 2f6:	cf 93       	push	r28
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	c0 54       	subi	r28, 0x40	; 64
 2fe:	d0 40       	sbci	r29, 0x00	; 0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	de bf       	out	0x3e, r29	; 62
 306:	0f be       	out	0x3f, r0	; 63
 308:	cd bf       	out	0x3d, r28	; 61
int w = 0;
void (*action[4][4][2])(void);
/* status縺ｮ蛻晄悄蛹・*/
initialize_DistanceSensor();
 30a:	fb de       	rcall	.-522    	; 0x102 <initialize_DistanceSensor>
	LineSensor = ((LSPORT&_BV(LS1))?2:0) | ((LSPORT&_BV(LS0))?1:0);
	return;
}

void initialize_LineSensor(void){
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);
 30c:	87 b1       	in	r24, 0x07	; 7
 30e:	8f 7c       	andi	r24, 0xCF	; 207
 310:	87 b9       	out	0x07, r24	; 7
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS1))?2:0) | ((LSPORT&_BV(LS0))?1:0);
 312:	35 99       	sbic	0x06, 5	; 6
 314:	03 c0       	rjmp	.+6      	; 0x31c <main+0x2c>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <main+0x30>
 31c:	22 e0       	ldi	r18, 0x02	; 2
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	86 b1       	in	r24, 0x06	; 6
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	54 e0       	ldi	r21, 0x04	; 4
 326:	96 95       	lsr	r25
 328:	87 95       	ror	r24
 32a:	5a 95       	dec	r21
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x36>
 32e:	81 70       	andi	r24, 0x01	; 1
 330:	90 70       	andi	r25, 0x00	; 0
 332:	28 2b       	or	r18, r24
 334:	39 2b       	or	r19, r25
 336:	30 93 06 01 	sts	0x0106, r19
 33a:	20 93 05 01 	sts	0x0105, r18
	LEDPORT |= RED | GREEN | BLUE;
	return;
}

void initialize_LED(void){
	LEDDDR |= RED | GREEN | BLUE;
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	84 63       	ori	r24, 0x34	; 52
 342:	84 b9       	out	0x04, r24	; 4

	LED[0] = black;
 344:	87 ed       	ldi	r24, 0xD7	; 215
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	90 93 16 01 	sts	0x0116, r25
 34c:	80 93 15 01 	sts	0x0115, r24
	LED[1] = blue;
 350:	8b ed       	ldi	r24, 0xDB	; 219
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 18 01 	sts	0x0118, r25
 358:	80 93 17 01 	sts	0x0117, r24
	LED[2] = green;
 35c:	80 ee       	ldi	r24, 0xE0	; 224
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 1a 01 	sts	0x011A, r25
 364:	80 93 19 01 	sts	0x0119, r24
	LED[3] = cyan;
 368:	85 ee       	ldi	r24, 0xE5	; 229
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 1c 01 	sts	0x011C, r25
 370:	80 93 1b 01 	sts	0x011B, r24
	LED[4] = red;
 374:	8a ee       	ldi	r24, 0xEA	; 234
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	90 93 1e 01 	sts	0x011E, r25
 37c:	80 93 1d 01 	sts	0x011D, r24
	LED[5] = magenta;
 380:	8f ee       	ldi	r24, 0xEF	; 239
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 20 01 	sts	0x0120, r25
 388:	80 93 1f 01 	sts	0x011F, r24
	LED[6] = yellow;
 38c:	84 ef       	ldi	r24, 0xF4	; 244
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 22 01 	sts	0x0122, r25
 394:	80 93 21 01 	sts	0x0121, r24
	LED[7] = white;
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	90 93 24 01 	sts	0x0124, r25
 3a0:	80 93 23 01 	sts	0x0123, r24
/* status縺ｮ蛻晄悄蛹・*/
initialize_DistanceSensor();
initialize_LineSensor();
/* action縺ｮ蛻晄悄蛹・*/
initialize_LED();
initialize_Ambulation();
 3a4:	78 df       	rcall	.-272    	; 0x296 <initialize_Ambulation>
/* action縺ｮ髢｢謨ｰ繝昴う繝ｳ繧ｿ縺ｮ蛻晄悄蛹・*/
action[0][0][0] = LED[0];
 3a6:	e0 91 15 01 	lds	r30, 0x0115
 3aa:	f0 91 16 01 	lds	r31, 0x0116
 3ae:	fa 83       	std	Y+2, r31	; 0x02
 3b0:	e9 83       	std	Y+1, r30	; 0x01
action[0][0][1] = Ambulation[5];
 3b2:	80 91 11 01 	lds	r24, 0x0111
 3b6:	90 91 12 01 	lds	r25, 0x0112
 3ba:	9c 83       	std	Y+4, r25	; 0x04
 3bc:	8b 83       	std	Y+3, r24	; 0x03
action[1][0][0] = LED[4];
 3be:	60 91 1d 01 	lds	r22, 0x011D
 3c2:	70 91 1e 01 	lds	r23, 0x011E
 3c6:	7a 8b       	std	Y+18, r23	; 0x12
 3c8:	69 8b       	std	Y+17, r22	; 0x11
action[1][0][1] = Ambulation[5];
 3ca:	9c 8b       	std	Y+20, r25	; 0x14
 3cc:	8b 8b       	std	Y+19, r24	; 0x13
action[2][0][0] = LED[2];
 3ce:	40 91 19 01 	lds	r20, 0x0119
 3d2:	50 91 1a 01 	lds	r21, 0x011A
 3d6:	5a a3       	std	Y+34, r21	; 0x22
 3d8:	49 a3       	std	Y+33, r20	; 0x21
action[2][0][1] = Ambulation[5];
 3da:	9c a3       	std	Y+36, r25	; 0x24
 3dc:	8b a3       	std	Y+35, r24	; 0x23
action[3][0][0] = LED[1];
 3de:	20 91 17 01 	lds	r18, 0x0117
 3e2:	30 91 18 01 	lds	r19, 0x0118
 3e6:	3a ab       	std	Y+50, r19	; 0x32
 3e8:	29 ab       	std	Y+49, r18	; 0x31
action[3][0][1] = Ambulation[5];
 3ea:	9c ab       	std	Y+52, r25	; 0x34
 3ec:	8b ab       	std	Y+51, r24	; 0x33
action[0][1][0] = LED[0];
 3ee:	fe 83       	std	Y+6, r31	; 0x06
 3f0:	ed 83       	std	Y+5, r30	; 0x05
action[0][1][1] = Ambulation[5];
 3f2:	98 87       	std	Y+8, r25	; 0x08
 3f4:	8f 83       	std	Y+7, r24	; 0x07
action[1][1][0] = LED[4];
 3f6:	7e 8b       	std	Y+22, r23	; 0x16
 3f8:	6d 8b       	std	Y+21, r22	; 0x15
action[1][1][1] = Ambulation[5];
 3fa:	98 8f       	std	Y+24, r25	; 0x18
 3fc:	8f 8b       	std	Y+23, r24	; 0x17
action[2][1][0] = LED[2];
 3fe:	5e a3       	std	Y+38, r21	; 0x26
 400:	4d a3       	std	Y+37, r20	; 0x25
action[2][1][1] = Ambulation[5];
 402:	98 a7       	std	Y+40, r25	; 0x28
 404:	8f a3       	std	Y+39, r24	; 0x27
action[3][1][0] = LED[1];
 406:	3e ab       	std	Y+54, r19	; 0x36
 408:	2d ab       	std	Y+53, r18	; 0x35
action[3][1][1] = Ambulation[5];
 40a:	98 af       	std	Y+56, r25	; 0x38
 40c:	8f ab       	std	Y+55, r24	; 0x37
action[0][2][0] = LED[0];
 40e:	fa 87       	std	Y+10, r31	; 0x0a
 410:	e9 87       	std	Y+9, r30	; 0x09
action[0][2][1] = Ambulation[5];
 412:	9c 87       	std	Y+12, r25	; 0x0c
 414:	8b 87       	std	Y+11, r24	; 0x0b
action[1][2][0] = LED[4];
 416:	7a 8f       	std	Y+26, r23	; 0x1a
 418:	69 8f       	std	Y+25, r22	; 0x19
action[1][2][1] = Ambulation[5];
 41a:	9c 8f       	std	Y+28, r25	; 0x1c
 41c:	8b 8f       	std	Y+27, r24	; 0x1b
action[2][2][0] = LED[2];
 41e:	5a a7       	std	Y+42, r21	; 0x2a
 420:	49 a7       	std	Y+41, r20	; 0x29
action[2][2][1] = Ambulation[5];
 422:	9c a7       	std	Y+44, r25	; 0x2c
 424:	8b a7       	std	Y+43, r24	; 0x2b
action[3][2][0] = LED[1];
 426:	3a af       	std	Y+58, r19	; 0x3a
 428:	29 af       	std	Y+57, r18	; 0x39
action[3][2][1] = Ambulation[5];
 42a:	9c af       	std	Y+60, r25	; 0x3c
 42c:	8b af       	std	Y+59, r24	; 0x3b
action[0][3][0] = LED[0];
 42e:	fe 87       	std	Y+14, r31	; 0x0e
 430:	ed 87       	std	Y+13, r30	; 0x0d
action[0][3][1] = Ambulation[5];
 432:	98 8b       	std	Y+16, r25	; 0x10
 434:	8f 87       	std	Y+15, r24	; 0x0f
action[1][3][0] = LED[4];
 436:	7e 8f       	std	Y+30, r23	; 0x1e
 438:	6d 8f       	std	Y+29, r22	; 0x1d
action[1][3][1] = Ambulation[5];
 43a:	98 a3       	std	Y+32, r25	; 0x20
 43c:	8f 8f       	std	Y+31, r24	; 0x1f
action[2][3][0] = LED[2];
 43e:	5e a7       	std	Y+46, r21	; 0x2e
 440:	4d a7       	std	Y+45, r20	; 0x2d
action[2][3][1] = Ambulation[5];
 442:	98 ab       	std	Y+48, r25	; 0x30
 444:	8f a7       	std	Y+47, r24	; 0x2f
action[3][3][0] = LED[1];
 446:	3e af       	std	Y+62, r19	; 0x3e
 448:	2d af       	std	Y+61, r18	; 0x3d
action[3][3][1] = Ambulation[5];
 44a:	fe 01       	movw	r30, r28
 44c:	ff 96       	adiw	r30, 0x3f	; 63
 44e:	91 83       	std	Z+1, r25	; 0x01
 450:	80 83       	st	Z, r24
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_DistanceSensor();
update_LineSensor();
for(w = 0; w <= 1; w++){
(*action[DistanceSensor][LineSensor][w])();
 452:	8e 01       	movw	r16, r28
 454:	0f 5f       	subi	r16, 0xFF	; 255
 456:	1f 4f       	sbci	r17, 0xFF	; 255
action[2][3][1] = Ambulation[5];
action[3][3][0] = LED[1];
action[3][3][1] = Ambulation[5];
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_DistanceSensor();
 458:	fe dd       	rcall	.-1028   	; 0x56 <update_DistanceSensor>
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS1))?2:0) | ((LSPORT&_BV(LS0))?1:0);
 45a:	35 99       	sbic	0x06, 5	; 6
 45c:	03 c0       	rjmp	.+6      	; 0x464 <main+0x174>
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <main+0x178>
 464:	22 e0       	ldi	r18, 0x02	; 2
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	44 e0       	ldi	r20, 0x04	; 4
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	4a 95       	dec	r20
 474:	e1 f7       	brne	.-8      	; 0x46e <main+0x17e>
 476:	81 70       	andi	r24, 0x01	; 1
 478:	90 70       	andi	r25, 0x00	; 0
 47a:	82 2b       	or	r24, r18
 47c:	93 2b       	or	r25, r19
 47e:	90 93 06 01 	sts	0x0106, r25
 482:	80 93 05 01 	sts	0x0105, r24
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_DistanceSensor();
update_LineSensor();
for(w = 0; w <= 1; w++){
(*action[DistanceSensor][LineSensor][w])();
 486:	e0 91 13 01 	lds	r30, 0x0113
 48a:	f0 91 14 01 	lds	r31, 0x0114
 48e:	ee 0f       	add	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	e8 0f       	add	r30, r24
 498:	f9 1f       	adc	r31, r25
 49a:	ee 0f       	add	r30, r30
 49c:	ff 1f       	adc	r31, r31
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	e0 0f       	add	r30, r16
 4a4:	f1 1f       	adc	r31, r17
 4a6:	01 90       	ld	r0, Z+
 4a8:	f0 81       	ld	r31, Z
 4aa:	e0 2d       	mov	r30, r0
 4ac:	09 95       	icall
 4ae:	e0 91 13 01 	lds	r30, 0x0113
 4b2:	f0 91 14 01 	lds	r31, 0x0114
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	80 91 05 01 	lds	r24, 0x0105
 4c2:	90 91 06 01 	lds	r25, 0x0106
 4c6:	e8 0f       	add	r30, r24
 4c8:	f9 1f       	adc	r31, r25
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	e0 0f       	add	r30, r16
 4d4:	f1 1f       	adc	r31, r17
 4d6:	02 80       	ldd	r0, Z+2	; 0x02
 4d8:	f3 81       	ldd	r31, Z+3	; 0x03
 4da:	e0 2d       	mov	r30, r0
 4dc:	09 95       	icall
 4de:	bc cf       	rjmp	.-136    	; 0x458 <main+0x168>

000004e0 <_exit>:
 4e0:	f8 94       	cli

000004e2 <__stop_program>:
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__stop_program>
