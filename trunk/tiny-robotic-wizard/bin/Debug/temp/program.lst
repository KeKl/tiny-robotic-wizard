
C:\Users\vaio\Documents\Visual Studio 2008\Projects\tiny-robotic-wizard\tiny-robotic-wizard\bin\Debug\temp\program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001e  00800100  00800100  00000370  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000122  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002f7  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000152  00000000  00000000  000007a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000384  00000000  00000000  000008fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014a  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 31       	cpi	r26, 0x1E	; 30
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	c2 d0       	rcall	.+388    	; 0x1d6 <main>
  52:	52 c1       	rjmp	.+676    	; 0x2f8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <update_LineSensor>:
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS0))?1:0);
  56:	86 b1       	in	r24, 0x06	; 6
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	24 e0       	ldi	r18, 0x04	; 4
  5c:	96 95       	lsr	r25
  5e:	87 95       	ror	r24
  60:	2a 95       	dec	r18
  62:	e1 f7       	brne	.-8      	; 0x5c <update_LineSensor+0x6>
  64:	81 70       	andi	r24, 0x01	; 1
  66:	90 70       	andi	r25, 0x00	; 0
  68:	90 93 01 01 	sts	0x0101, r25
  6c:	80 93 00 01 	sts	0x0100, r24
	return;
}
  70:	08 95       	ret

00000072 <initialize_LineSensor>:

void initialize_LineSensor(void){
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 7c       	andi	r24, 0xCF	; 207
  76:	87 b9       	out	0x07, r24	; 7
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS0))?1:0);
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	34 e0       	ldi	r19, 0x04	; 4
  7e:	96 95       	lsr	r25
  80:	87 95       	ror	r24
  82:	3a 95       	dec	r19
  84:	e1 f7       	brne	.-8      	; 0x7e <initialize_LineSensor+0xc>
  86:	81 70       	andi	r24, 0x01	; 1
  88:	90 70       	andi	r25, 0x00	; 0
  8a:	90 93 01 01 	sts	0x0101, r25
  8e:	80 93 00 01 	sts	0x0100, r24
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);

	update_LineSensor();

	return;
}
  92:	08 95       	ret

00000094 <black>:
#define RED _BV(PB2)

void (*LED[8])(void);

void black(void){
	LEDPORT &= ~RED & ~GREEN & ~BLUE;
  94:	85 b1       	in	r24, 0x05	; 5
  96:	8b 7c       	andi	r24, 0xCB	; 203
  98:	85 b9       	out	0x05, r24	; 5
	return;
}
  9a:	08 95       	ret

0000009c <blue>:

void blue(void){
	LEDPORT &= ~RED & ~GREEN;
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8b 7d       	andi	r24, 0xDB	; 219
  a0:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= BLUE;
  a2:	2c 9a       	sbi	0x05, 4	; 5
	return;
}
  a4:	08 95       	ret

000000a6 <green>:

void green(void){
	LEDPORT &= ~RED & ~BLUE;
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	8b 7e       	andi	r24, 0xEB	; 235
  aa:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= GREEN;
  ac:	2d 9a       	sbi	0x05, 5	; 5
	return;
}
  ae:	08 95       	ret

000000b0 <cyan>:

void cyan(void){
	LEDPORT &= ~RED;
  b0:	2a 98       	cbi	0x05, 2	; 5
	LEDPORT |= GREEN | BLUE;
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	80 63       	ori	r24, 0x30	; 48
  b6:	85 b9       	out	0x05, r24	; 5
	return;
}
  b8:	08 95       	ret

000000ba <red>:

void red(void){
	LEDPORT &= ~GREEN & ~BLUE;
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8f 7c       	andi	r24, 0xCF	; 207
  be:	85 b9       	out	0x05, r24	; 5
	LEDPORT |= RED;
  c0:	2a 9a       	sbi	0x05, 2	; 5
	return;
}
  c2:	08 95       	ret

000000c4 <magenta>:

void magenta(void){
	LEDPORT &= ~GREEN;
  c4:	2d 98       	cbi	0x05, 5	; 5
	LEDPORT |= RED | BLUE;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	84 61       	ori	r24, 0x14	; 20
  ca:	85 b9       	out	0x05, r24	; 5
	return;
}
  cc:	08 95       	ret

000000ce <yellow>:

void yellow(void){
	LEDPORT &= ~BLUE;
  ce:	2c 98       	cbi	0x05, 4	; 5
	LEDPORT |= RED | GREEN;
  d0:	85 b1       	in	r24, 0x05	; 5
  d2:	84 62       	ori	r24, 0x24	; 36
  d4:	85 b9       	out	0x05, r24	; 5
	return;
}
  d6:	08 95       	ret

000000d8 <white>:

void white(void){
	LEDPORT |= RED | GREEN | BLUE;
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	84 63       	ori	r24, 0x34	; 52
  dc:	85 b9       	out	0x05, r24	; 5
	return;
}
  de:	08 95       	ret

000000e0 <initialize_LED>:

void initialize_LED(void){
	LEDDDR |= RED | GREEN | BLUE;
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	84 63       	ori	r24, 0x34	; 52
  e4:	84 b9       	out	0x04, r24	; 4

	LED[0] = black;
  e6:	8a e4       	ldi	r24, 0x4A	; 74
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 0f 01 	sts	0x010F, r25
  ee:	80 93 0e 01 	sts	0x010E, r24
	LED[1] = blue;
  f2:	8e e4       	ldi	r24, 0x4E	; 78
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 11 01 	sts	0x0111, r25
  fa:	80 93 10 01 	sts	0x0110, r24
	LED[2] = green;
  fe:	83 e5       	ldi	r24, 0x53	; 83
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	90 93 13 01 	sts	0x0113, r25
 106:	80 93 12 01 	sts	0x0112, r24
	LED[3] = cyan;
 10a:	88 e5       	ldi	r24, 0x58	; 88
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	90 93 15 01 	sts	0x0115, r25
 112:	80 93 14 01 	sts	0x0114, r24
	LED[4] = red;
 116:	8d e5       	ldi	r24, 0x5D	; 93
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	90 93 17 01 	sts	0x0117, r25
 11e:	80 93 16 01 	sts	0x0116, r24
	LED[5] = magenta;
 122:	82 e6       	ldi	r24, 0x62	; 98
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 19 01 	sts	0x0119, r25
 12a:	80 93 18 01 	sts	0x0118, r24
	LED[6] = yellow;
 12e:	87 e6       	ldi	r24, 0x67	; 103
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 1b 01 	sts	0x011B, r25
 136:	80 93 1a 01 	sts	0x011A, r24
	LED[7] = white;
 13a:	8c e6       	ldi	r24, 0x6C	; 108
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 1d 01 	sts	0x011D, r25
 142:	80 93 1c 01 	sts	0x011C, r24
	return;
}
 146:	08 95       	ret

00000148 <nop>:

void (*Ambulation[6])(void);

void nop(void){
	return;
}
 148:	08 95       	ret

0000014a <forward>:

void forward(void){
	LF();
 14a:	5e 98       	cbi	0x0b, 6	; 11
 14c:	5d 9a       	sbi	0x0b, 5	; 11
	RF();
 14e:	5f 98       	cbi	0x0b, 7	; 11
 150:	28 9a       	sbi	0x05, 0	; 5

	return;
}
 152:	08 95       	ret

00000154 <back>:

void back(void){
	LB();
 154:	5e 9a       	sbi	0x0b, 6	; 11
 156:	5d 98       	cbi	0x0b, 5	; 11
	RB();
 158:	5f 9a       	sbi	0x0b, 7	; 11
 15a:	28 98       	cbi	0x05, 0	; 5

	return;
}
 15c:	08 95       	ret

0000015e <cw>:

void cw(void){
	LF();
 15e:	5e 98       	cbi	0x0b, 6	; 11
 160:	5d 9a       	sbi	0x0b, 5	; 11
	RB();
 162:	5f 9a       	sbi	0x0b, 7	; 11
 164:	28 98       	cbi	0x05, 0	; 5

	return;
}
 166:	08 95       	ret

00000168 <ccw>:

void ccw(void){
	LB();
 168:	5e 9a       	sbi	0x0b, 6	; 11
 16a:	5d 98       	cbi	0x0b, 5	; 11
	RF();
 16c:	5f 98       	cbi	0x0b, 7	; 11
 16e:	28 9a       	sbi	0x05, 0	; 5

	return;
}
 170:	08 95       	ret

00000172 <stop>:

void stop(void){
	PORTD &= ~_BV(PD6), PORTD &= ~_BV(PD5);
 172:	5e 98       	cbi	0x0b, 6	; 11
 174:	5d 98       	cbi	0x0b, 5	; 11
	PORTB &= ~_BV(PD7), PORTB &= ~_BV(PB0);
 176:	2f 98       	cbi	0x05, 7	; 5
 178:	28 98       	cbi	0x05, 0	; 5
	return;
}
 17a:	08 95       	ret

0000017c <initialize_Ambulation>:

void initialize_Ambulation(void){
	DDRD |= _BV(PD7) | _BV(PD6) | _BV(PD5);
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	80 6e       	ori	r24, 0xE0	; 224
 180:	8a b9       	out	0x0a, r24	; 10
	DDRB |= _BV(PB0);
 182:	20 9a       	sbi	0x04, 0	; 4

	return;
}

void stop(void){
	PORTD &= ~_BV(PD6), PORTD &= ~_BV(PD5);
 184:	5e 98       	cbi	0x0b, 6	; 11
 186:	5d 98       	cbi	0x0b, 5	; 11
	PORTB &= ~_BV(PD7), PORTB &= ~_BV(PB0);
 188:	2f 98       	cbi	0x05, 7	; 5
 18a:	28 98       	cbi	0x05, 0	; 5
	DDRD |= _BV(PD7) | _BV(PD6) | _BV(PD5);
	DDRB |= _BV(PB0);

	stop();

	Ambulation[0] = nop;
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 03 01 	sts	0x0103, r25
 194:	80 93 02 01 	sts	0x0102, r24
	Ambulation[1] = forward;
 198:	85 ea       	ldi	r24, 0xA5	; 165
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 05 01 	sts	0x0105, r25
 1a0:	80 93 04 01 	sts	0x0104, r24
	Ambulation[2] = back;
 1a4:	8a ea       	ldi	r24, 0xAA	; 170
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	90 93 07 01 	sts	0x0107, r25
 1ac:	80 93 06 01 	sts	0x0106, r24
	Ambulation[3] = cw;
 1b0:	8f ea       	ldi	r24, 0xAF	; 175
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 09 01 	sts	0x0109, r25
 1b8:	80 93 08 01 	sts	0x0108, r24
	Ambulation[4] = ccw;
 1bc:	84 eb       	ldi	r24, 0xB4	; 180
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 0b 01 	sts	0x010B, r25
 1c4:	80 93 0a 01 	sts	0x010A, r24
	Ambulation[5] = stop;
 1c8:	89 eb       	ldi	r24, 0xB9	; 185
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 0d 01 	sts	0x010D, r25
 1d0:	80 93 0c 01 	sts	0x010C, r24

	return;
}
 1d4:	08 95       	ret

000001d6 <main>:

int main(void){
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	df 93       	push	r29
 1dc:	cf 93       	push	r28
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	28 97       	sbiw	r28, 0x08	; 8
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	f8 94       	cli
 1e8:	de bf       	out	0x3e, r29	; 62
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	cd bf       	out	0x3d, r28	; 61
	LineSensor = ((LSPORT&_BV(LS0))?1:0);
	return;
}

void initialize_LineSensor(void){
	LSDDR &= ~_BV(LS1) & ~_BV(LS0);
 1ee:	87 b1       	in	r24, 0x07	; 7
 1f0:	8f 7c       	andi	r24, 0xCF	; 207
 1f2:	87 b9       	out	0x07, r24	; 7
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS0))?1:0);
 1f4:	86 b1       	in	r24, 0x06	; 6
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	74 e0       	ldi	r23, 0x04	; 4
 1fa:	96 95       	lsr	r25
 1fc:	87 95       	ror	r24
 1fe:	7a 95       	dec	r23
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x24>
 202:	81 70       	andi	r24, 0x01	; 1
 204:	90 70       	andi	r25, 0x00	; 0
 206:	90 93 01 01 	sts	0x0101, r25
 20a:	80 93 00 01 	sts	0x0100, r24
	LEDPORT |= RED | GREEN | BLUE;
	return;
}

void initialize_LED(void){
	LEDDDR |= RED | GREEN | BLUE;
 20e:	84 b1       	in	r24, 0x04	; 4
 210:	84 63       	ori	r24, 0x34	; 52
 212:	84 b9       	out	0x04, r24	; 4

	LED[0] = black;
 214:	8a e4       	ldi	r24, 0x4A	; 74
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 0f 01 	sts	0x010F, r25
 21c:	80 93 0e 01 	sts	0x010E, r24
	LED[1] = blue;
 220:	8e e4       	ldi	r24, 0x4E	; 78
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 11 01 	sts	0x0111, r25
 228:	80 93 10 01 	sts	0x0110, r24
	LED[2] = green;
 22c:	83 e5       	ldi	r24, 0x53	; 83
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 13 01 	sts	0x0113, r25
 234:	80 93 12 01 	sts	0x0112, r24
	LED[3] = cyan;
 238:	88 e5       	ldi	r24, 0x58	; 88
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 15 01 	sts	0x0115, r25
 240:	80 93 14 01 	sts	0x0114, r24
	LED[4] = red;
 244:	8d e5       	ldi	r24, 0x5D	; 93
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	90 93 17 01 	sts	0x0117, r25
 24c:	80 93 16 01 	sts	0x0116, r24
	LED[5] = magenta;
 250:	82 e6       	ldi	r24, 0x62	; 98
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 19 01 	sts	0x0119, r25
 258:	80 93 18 01 	sts	0x0118, r24
	LED[6] = yellow;
 25c:	87 e6       	ldi	r24, 0x67	; 103
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 1b 01 	sts	0x011B, r25
 264:	80 93 1a 01 	sts	0x011A, r24
	LED[7] = white;
 268:	8c e6       	ldi	r24, 0x6C	; 108
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 1d 01 	sts	0x011D, r25
 270:	80 93 1c 01 	sts	0x011C, r24
void (*action[2][2])(void);
/* status縺ｮ蛻晄悄蛹・*/
initialize_LineSensor();
/* action縺ｮ蛻晄悄蛹・*/
initialize_LED();
initialize_Ambulation();
 274:	83 df       	rcall	.-250    	; 0x17c <initialize_Ambulation>
/* action縺ｮ髢｢謨ｰ繝昴う繝ｳ繧ｿ縺ｮ蛻晄悄蛹・*/
action[0][0] = LED[1];
 276:	80 91 10 01 	lds	r24, 0x0110
 27a:	90 91 11 01 	lds	r25, 0x0111
 27e:	9a 83       	std	Y+2, r25	; 0x02
 280:	89 83       	std	Y+1, r24	; 0x01
action[0][1] = Ambulation[2];
 282:	80 91 06 01 	lds	r24, 0x0106
 286:	90 91 07 01 	lds	r25, 0x0107
 28a:	9c 83       	std	Y+4, r25	; 0x04
 28c:	8b 83       	std	Y+3, r24	; 0x03
action[1][0] = LED[4];
 28e:	80 91 16 01 	lds	r24, 0x0116
 292:	90 91 17 01 	lds	r25, 0x0117
 296:	9e 83       	std	Y+6, r25	; 0x06
 298:	8d 83       	std	Y+5, r24	; 0x05
action[1][1] = Ambulation[0];
 29a:	80 91 02 01 	lds	r24, 0x0102
 29e:	90 91 03 01 	lds	r25, 0x0103
 2a2:	98 87       	std	Y+8, r25	; 0x08
 2a4:	8f 83       	std	Y+7, r24	; 0x07
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_LineSensor();
for(w = 0; w <= 1; w++){
(*action[LineSensor][w])();
 2a6:	8e 01       	movw	r16, r28
 2a8:	0f 5f       	subi	r16, 0xFF	; 255
 2aa:	1f 4f       	sbci	r17, 0xFF	; 255
#define LS1 PC5

int LineSensor;

void update_LineSensor(void){
	LineSensor = ((LSPORT&_BV(LS0))?1:0);
 2ac:	e6 b1       	in	r30, 0x06	; 6
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	f6 95       	lsr	r31
 2b4:	e7 95       	ror	r30
 2b6:	6a 95       	dec	r22
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0xdc>
 2ba:	e1 70       	andi	r30, 0x01	; 1
 2bc:	f0 70       	andi	r31, 0x00	; 0
 2be:	f0 93 01 01 	sts	0x0101, r31
 2c2:	e0 93 00 01 	sts	0x0100, r30
action[1][1] = Ambulation[0];
while(1){
/* status縺ｮ蛻晄悄蛹・*/
update_LineSensor();
for(w = 0; w <= 1; w++){
(*action[LineSensor][w])();
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	e0 0f       	add	r30, r16
 2d0:	f1 1f       	adc	r31, r17
 2d2:	01 90       	ld	r0, Z+
 2d4:	f0 81       	ld	r31, Z
 2d6:	e0 2d       	mov	r30, r0
 2d8:	09 95       	icall
 2da:	e0 91 00 01 	lds	r30, 0x0100
 2de:	f0 91 01 01 	lds	r31, 0x0101
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	e0 0f       	add	r30, r16
 2ec:	f1 1f       	adc	r31, r17
 2ee:	02 80       	ldd	r0, Z+2	; 0x02
 2f0:	f3 81       	ldd	r31, Z+3	; 0x03
 2f2:	e0 2d       	mov	r30, r0
 2f4:	09 95       	icall
 2f6:	da cf       	rjmp	.-76     	; 0x2ac <main+0xd6>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
