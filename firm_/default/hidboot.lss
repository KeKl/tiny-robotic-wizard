
hidboot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001fca  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ca  00001800  00001800  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800110  00800110  0000086e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cb  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e30  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049c  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000729  00000000  00000000  00001e45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000052c  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000460  00000000  00000000  00002b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001800 <__vectors>:
    1800:	63 c0       	rjmp	.+198    	; 0x18c8 <__ctors_end>
    1802:	c1 c2       	rjmp	.+1410   	; 0x1d86 <__vector_1>
    1804:	7c c0       	rjmp	.+248    	; 0x18fe <__bad_interrupt>
    1806:	7b c0       	rjmp	.+246    	; 0x18fe <__bad_interrupt>
    1808:	7a c0       	rjmp	.+244    	; 0x18fe <__bad_interrupt>
    180a:	79 c0       	rjmp	.+242    	; 0x18fe <__bad_interrupt>
    180c:	78 c0       	rjmp	.+240    	; 0x18fe <__bad_interrupt>
    180e:	77 c0       	rjmp	.+238    	; 0x18fe <__bad_interrupt>
    1810:	76 c0       	rjmp	.+236    	; 0x18fe <__bad_interrupt>
    1812:	75 c0       	rjmp	.+234    	; 0x18fe <__bad_interrupt>
    1814:	74 c0       	rjmp	.+232    	; 0x18fe <__bad_interrupt>
    1816:	73 c0       	rjmp	.+230    	; 0x18fe <__bad_interrupt>
    1818:	72 c0       	rjmp	.+228    	; 0x18fe <__bad_interrupt>
    181a:	71 c0       	rjmp	.+226    	; 0x18fe <__bad_interrupt>
    181c:	70 c0       	rjmp	.+224    	; 0x18fe <__bad_interrupt>
    181e:	6f c0       	rjmp	.+222    	; 0x18fe <__bad_interrupt>
    1820:	6e c0       	rjmp	.+220    	; 0x18fe <__bad_interrupt>
    1822:	6d c0       	rjmp	.+218    	; 0x18fe <__bad_interrupt>
    1824:	6c c0       	rjmp	.+216    	; 0x18fe <__bad_interrupt>
    1826:	6b c0       	rjmp	.+214    	; 0x18fe <__bad_interrupt>
    1828:	6a c0       	rjmp	.+212    	; 0x18fe <__bad_interrupt>
    182a:	69 c0       	rjmp	.+210    	; 0x18fe <__bad_interrupt>
    182c:	68 c0       	rjmp	.+208    	; 0x18fe <__bad_interrupt>
    182e:	67 c0       	rjmp	.+206    	; 0x18fe <__bad_interrupt>
    1830:	66 c0       	rjmp	.+204    	; 0x18fe <__bad_interrupt>
    1832:	65 c0       	rjmp	.+202    	; 0x18fe <__bad_interrupt>

00001834 <_bootHidReportDescriptor>:
    1834:	06 00 ff 09 01 a1 02 85 01 75 08 95 06 09 00 b2     .........u......
    1844:	02 01 85 02 75 08 95 42 09 00 b2 02 01 c0           ....u..B......

00001852 <_deviceDescriptor>:
    1852:	12 01 01 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
    1862:	00 01                                               ..

00001864 <_configurationDescriptor>:
    1864:	09 02 29 00 01 01 00 80 0a 09 04 00 00 01 03 00     ..).............
    1874:	00 00 09 21 01 01 00 01 22 1e 00 07 05 81 03 08     ...!....".......
    1884:	00 0a 07 05 01 03 08 00 0a                          .........

0000188d <usbDescriptorString0>:
    188d:	04 03 09 04                                         ....

00001891 <usbDescriptorStringVendor>:
    1891:	2a 03 73 00 75 00 62 00 73 00 70 00 61 00 63 00     *.s.u.b.s.p.a.c.
    18a1:	65 00 2e 00 64 00 79 00 6e 00 64 00 6e 00 73 00     e...d.y.n.d.n.s.
    18b1:	2e 00 69 00 6e 00 66 00 6f 00                       ..i.n.f.o.

000018bb <usbDescriptorStringDevice>:
    18bb:	0c 03 48 00 49 00 44 00 42 00 4c 00 00              ..H.I.D.B.L..

000018c8 <__ctors_end>:
    18c8:	11 24       	eor	r1, r1
    18ca:	1f be       	out	0x3f, r1	; 63
    18cc:	cf ef       	ldi	r28, 0xFF	; 255
    18ce:	d4 e0       	ldi	r29, 0x04	; 4
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	cd bf       	out	0x3d, r28	; 61

000018d4 <__do_copy_data>:
    18d4:	11 e0       	ldi	r17, 0x01	; 1
    18d6:	a0 e0       	ldi	r26, 0x00	; 0
    18d8:	b1 e0       	ldi	r27, 0x01	; 1
    18da:	ea ec       	ldi	r30, 0xCA	; 202
    18dc:	ff e1       	ldi	r31, 0x1F	; 31
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <.do_copy_data_start>

000018e0 <.do_copy_data_loop>:
    18e0:	05 90       	lpm	r0, Z+
    18e2:	0d 92       	st	X+, r0

000018e4 <.do_copy_data_start>:
    18e4:	a0 31       	cpi	r26, 0x10	; 16
    18e6:	b1 07       	cpc	r27, r17
    18e8:	d9 f7       	brne	.-10     	; 0x18e0 <.do_copy_data_loop>

000018ea <__do_clear_bss>:
    18ea:	11 e0       	ldi	r17, 0x01	; 1
    18ec:	a0 e1       	ldi	r26, 0x10	; 16
    18ee:	b1 e0       	ldi	r27, 0x01	; 1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <.do_clear_bss_start>

000018f2 <.do_clear_bss_loop>:
    18f2:	1d 92       	st	X+, r1

000018f4 <.do_clear_bss_start>:
    18f4:	ad 38       	cpi	r26, 0x8D	; 141
    18f6:	b1 07       	cpc	r27, r17
    18f8:	e1 f7       	brne	.-8      	; 0x18f2 <.do_clear_bss_loop>
    18fa:	55 d0       	rcall	.+170    	; 0x19a6 <main>
    18fc:	64 c3       	rjmp	.+1736   	; 0x1fc6 <_exit>

000018fe <__bad_interrupt>:
    18fe:	80 cf       	rjmp	.-256    	; 0x1800 <__vectors>

00001900 <usbFunctionDescriptor>:
	};

__attribute__((naked))
uint8_t usbFunctionDescriptor(usbRequest_t *rq)
{
	asm volatile ("ijmp\n\t"::"z" (_functionTable[FUNCTION_DESCRIPTOR]));
    1900:	e0 91 06 01 	lds	r30, 0x0106
    1904:	f0 91 07 01 	lds	r31, 0x0107
    1908:	09 94       	ijmp

0000190a <usbFunctionSetup>:
}
__attribute__((naked))
usbMsgLen_t usbFunctionSetup(uint8_t* data)
{
	asm volatile ("ijmp\n\t"::"z" (_functionTable[FUNCTION_SETUP]));
    190a:	e0 91 08 01 	lds	r30, 0x0108
    190e:	f0 91 09 01 	lds	r31, 0x0109
    1912:	09 94       	ijmp

00001914 <usbFunctionRead>:
}
__attribute__((naked))
uint8_t usbFunctionRead(uint8_t* data, uint8_t len)
{
	asm volatile ("ijmp\n\t"::"z" (_functionTable[FUNCTION_READ]));
    1914:	e0 91 0a 01 	lds	r30, 0x010A
    1918:	f0 91 0b 01 	lds	r31, 0x010B
    191c:	09 94       	ijmp

0000191e <usbFunctionWrite>:
}
__attribute__((naked))
uint8_t usbFunctionWrite(uint8_t* data, uint8_t len)
{
	asm volatile ("ijmp\n\t"::"z" (_functionTable[FUNCTION_WRITE]));
    191e:	e0 91 0c 01 	lds	r30, 0x010C
    1922:	f0 91 0d 01 	lds	r31, 0x010D
    1926:	09 94       	ijmp

00001928 <bootUsbDescriptor>:
/**
 * @brief 要求されたディスクリプタを設定する
 */
uint8_t	bootUsbDescriptor(usbRequest_t *rq)
{
	if( rq->wValue.bytes[1] == USBDESCR_DEVICE )
    1928:	fc 01       	movw	r30, r24
    192a:	83 81       	ldd	r24, Z+3	; 0x03
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	41 f4       	brne	.+16     	; 0x1940 <bootUsbDescriptor+0x18>
	{
		usbMsgPtr = _deviceDescriptor;
    1930:	82 e5       	ldi	r24, 0x52	; 82
    1932:	98 e1       	ldi	r25, 0x18	; 24
    1934:	90 93 72 01 	sts	0x0172, r25
    1938:	80 93 71 01 	sts	0x0171, r24
    193c:	82 e1       	ldi	r24, 0x12	; 18
    193e:	08 95       	ret
		return sizeof(_deviceDescriptor);
	}
	else if( rq->wValue.bytes[1] == USBDESCR_CONFIG )
    1940:	82 30       	cpi	r24, 0x02	; 2
    1942:	41 f4       	brne	.+16     	; 0x1954 <bootUsbDescriptor+0x2c>
	{
		usbMsgPtr = _configurationDescriptor;
    1944:	84 e6       	ldi	r24, 0x64	; 100
    1946:	98 e1       	ldi	r25, 0x18	; 24
    1948:	90 93 72 01 	sts	0x0172, r25
    194c:	80 93 71 01 	sts	0x0171, r24
    1950:	89 e2       	ldi	r24, 0x29	; 41
    1952:	08 95       	ret
		return sizeof(_configurationDescriptor);
	}
	else if( rq->wValue.bytes[1] == USBDESCR_HID_REPORT )
    1954:	82 32       	cpi	r24, 0x22	; 34
    1956:	11 f0       	breq	.+4      	; 0x195c <bootUsbDescriptor+0x34>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	08 95       	ret
	{
		usbMsgPtr = _bootHidReportDescriptor;;
    195c:	84 e3       	ldi	r24, 0x34	; 52
    195e:	98 e1       	ldi	r25, 0x18	; 24
    1960:	90 93 72 01 	sts	0x0172, r25
    1964:	80 93 71 01 	sts	0x0171, r24
    1968:	8e e1       	ldi	r24, 0x1E	; 30
		return sizeof(_bootHidReportDescriptor);
	}

	return 0;
}
    196a:	08 95       	ret

0000196c <bootUsbRead>:
	
	return len;
	*/
	// 今回はusbFunctionReadを用いない
	return 1;
}
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	08 95       	ret

00001970 <bootUsbSetup>:
/**
 * @brief ホストからのリクエストに対する処理を行う．
 */
usbMsgLen_t bootUsbSetup(uint8_t data[8])
{
	usbRequest_t    *rq = (void *)data;
    1970:	fc 01       	movw	r30, r24

	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS)	// HID Class Request
    1972:	80 81       	ld	r24, Z
    1974:	80 76       	andi	r24, 0x60	; 96
    1976:	80 32       	cpi	r24, 0x20	; 32
    1978:	a1 f4       	brne	.+40     	; 0x19a2 <bootUsbSetup+0x32>
	{
		if(rq->bRequest == USBRQ_HID_GET_REPORT)
    197a:	81 81       	ldd	r24, Z+1	; 0x01
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	41 f4       	brne	.+16     	; 0x1990 <bootUsbSetup+0x20>
		{
			// 読み出しはReportID = 1のレポートだけ．
			// 長さが8バイト以下なので，ここで転送する．
			usbMsgPtr = (uint8_t*)&_blinfo;
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	91 e0       	ldi	r25, 0x01	; 1
    1984:	90 93 72 01 	sts	0x0172, r25
    1988:	80 93 71 01 	sts	0x0171, r24
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	08 95       	ret
			_bytesRemaining = sizeof(BLINFO);
			_currentAddress = 0;
			return USB_NO_MSG;
			 */
		}
		else if(rq->bRequest == USBRQ_HID_SET_REPORT)
    1990:	89 30       	cpi	r24, 0x09	; 9
    1992:	39 f4       	brne	.+14     	; 0x19a2 <bootUsbSetup+0x32>
		{
			// 書き込みはReportID = 2のレポートだけ．
			_bytesRemaining = rq->wLength.bytes[0];
    1994:	86 81       	ldd	r24, Z+6	; 0x06
    1996:	80 93 55 01 	sts	0x0155, r24
			_currentAddress = 0;
    199a:	10 92 56 01 	sts	0x0156, r1
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	08 95       	ret
			return USB_NO_MSG;
    19a2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
    19a4:	08 95       	ret

000019a6 <main>:
 * @brief メインです
 */
int main(void)
{
	// 割り込みベクタをブートセクションの先頭に設定
	MCUCR = _BV(IVCE);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	85 bf       	out	0x35, r24	; 53
	MCUCR = _BV(IVSEL);
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	85 bf       	out	0x35, r24	; 53
	
	wdt_enable(WDTO_1S);
    19ae:	2e e0       	ldi	r18, 0x0E	; 14
    19b0:	88 e1       	ldi	r24, 0x18	; 24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	a8 95       	wdr
    19ba:	80 93 60 00 	sts	0x0060, r24
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	20 93 60 00 	sts	0x0060, r18
	
	// ポートの初期化処理
	DDR_BOOTMODE &= ~_BV(BIT_BOOTMODE);
    19c4:	51 98       	cbi	0x0a, 1	; 10
	PORT_BOOTMODE |= _BV(BIT_BOOTMODE);
    19c6:	59 9a       	sbi	0x0b, 1	; 11
	#ifdef BIT_TESTLED
	DDR_TESTLED |= _BV(BIT_TESTLED);
	PORT_TESTLED &= ~_BV(BIT_TESTLED);
	#endif

	usbInit();
    19c8:	91 d0       	rcall	.+290    	; 0x1aec <usbInit>
	
	usbDeviceDisconnect();
    19ca:	50 9a       	sbi	0x0a, 0	; 10
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ce:	48 e8       	ldi	r20, 0x88	; 136
    19d0:	53 e1       	ldi	r21, 0x13	; 19
    19d2:	03 c0       	rjmp	.+6      	; 0x19da <main+0x34>
    19d4:	ca 01       	movw	r24, r20
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	f1 f7       	brne	.-4      	; 0x19d6 <main+0x30>
	uint8_t i = 0;
	while(--i > 0)
    19da:	21 50       	subi	r18, 0x01	; 1
    19dc:	d9 f7       	brne	.-10     	; 0x19d4 <main+0x2e>
		_delay_ms(1);
	usbDeviceConnect();
    19de:	50 98       	cbi	0x0a, 0	; 10
	wdt_reset();
    19e0:	a8 95       	wdr

	//
	//*
	if(PIN_BOOTMODE & _BV(BIT_BOOTMODE))
    19e2:	49 9b       	sbis	0x09, 1	; 9
    19e4:	09 c0       	rjmp	.+18     	; 0x19f8 <main+0x52>
	{
	//*/
#ifdef BIT_TESTLED
		PORT_TESTLED |= _BV(BIT_TESTLED);
#endif
		sei();
    19e6:	78 94       	sei
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <main+0x48>
		
		while(!_exitBootloader)
		{
			wdt_reset();
    19ea:	a8 95       	wdr
			usbPoll();
    19ec:	8c d0       	rcall	.+280    	; 0x1b06 <usbPoll>
#ifdef BIT_TESTLED
		PORT_TESTLED |= _BV(BIT_TESTLED);
#endif
		sei();
		
		while(!_exitBootloader)
    19ee:	80 91 10 01 	lds	r24, 0x0110
    19f2:	88 23       	and	r24, r24
    19f4:	d1 f3       	breq	.-12     	; 0x19ea <main+0x44>
		{
			wdt_reset();
			usbPoll();
		}
		
		cli();
    19f6:	f8 94       	cli
	//*
	}
	//*/
	// アプリケーションを実行する
	usbDeviceDisconnect();
    19f8:	50 9a       	sbi	0x0a, 0	; 10
	wdt_disable();
    19fa:	88 e1       	ldi	r24, 0x18	; 24
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	80 93 60 00 	sts	0x0060, r24
    1a04:	10 92 60 00 	sts	0x0060, r1
    1a08:	0f be       	out	0x3f, r0	; 63
	boot_rww_enable();
    1a0a:	81 e1       	ldi	r24, 0x11	; 17
    1a0c:	80 93 57 00 	sts	0x0057, r24
    1a10:	e8 95       	spm
	MCUCR = _BV(IVCE);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    1a16:	15 be       	out	0x35, r1	; 53
	//
	((void(*)())0)();
    1a18:	e0 e0       	ldi	r30, 0x00	; 0
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	09 95       	icall
	return 0;
}
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	08 95       	ret

00001a24 <bootUsbWrite>:

/**
 * @brief Control-Out 転送のデータ転送処理を行う
 */
uint8_t   bootUsbWrite(uint8_t *data, uint8_t len)
{
    1a24:	1f 93       	push	r17
    1a26:	fc 01       	movw	r30, r24
    1a28:	16 2f       	mov	r17, r22
	if(_bytesRemaining == 0)	// もう残っていない．転送終了．
    1a2a:	80 91 55 01 	lds	r24, 0x0155
    1a2e:	88 23       	and	r24, r24
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <bootUsbWrite+0x10>
    1a32:	59 c0       	rjmp	.+178    	; 0x1ae6 <bootUsbWrite+0xc2>
		return 1;
	if(len > _bytesRemaining)
    1a34:	80 91 55 01 	lds	r24, 0x0155
    1a38:	86 17       	cp	r24, r22
    1a3a:	10 f4       	brcc	.+4      	; 0x1a40 <bootUsbWrite+0x1c>
		len = _bytesRemaining;
    1a3c:	10 91 55 01 	lds	r17, 0x0155
	
	if( _currentAddress == 0 && data[0] == 0x01 )
    1a40:	80 91 56 01 	lds	r24, 0x0156
    1a44:	88 23       	and	r24, r24
    1a46:	31 f4       	brne	.+12     	; 0x1a54 <bootUsbWrite+0x30>
    1a48:	80 81       	ld	r24, Z
    1a4a:	81 30       	cpi	r24, 0x01	; 1
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <bootUsbWrite+0x30>
	{
		// ReportID 1に対する書き込みがあった．
		// ユーザーアプリケーションに処理を移行する．
		_exitBootloader = 1;
    1a4e:	80 93 10 01 	sts	0x0110, r24
    1a52:	4a c0       	rjmp	.+148    	; 0x1ae8 <bootUsbWrite+0xc4>
		return 1;
	}

	memcpy(_buffer + _currentAddress, data, len);
    1a54:	20 91 56 01 	lds	r18, 0x0156
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	2e 5e       	subi	r18, 0xEE	; 238
    1a5c:	3e 4f       	sbci	r19, 0xFE	; 254
    1a5e:	c9 01       	movw	r24, r18
    1a60:	bf 01       	movw	r22, r30
    1a62:	41 2f       	mov	r20, r17
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	a6 d2       	rcall	.+1356   	; 0x1fb4 <memcpy>

	_currentAddress += len;
    1a68:	80 91 56 01 	lds	r24, 0x0156
    1a6c:	81 0f       	add	r24, r17
    1a6e:	80 93 56 01 	sts	0x0156, r24
	_bytesRemaining -= len;
    1a72:	80 91 55 01 	lds	r24, 0x0155
    1a76:	81 1b       	sub	r24, r17
    1a78:	80 93 55 01 	sts	0x0155, r24
	
	if( _bytesRemaining == 0 )
    1a7c:	80 91 55 01 	lds	r24, 0x0155
    1a80:	88 23       	and	r24, r24
    1a82:	11 f0       	breq	.+4      	; 0x1a88 <bootUsbWrite+0x64>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	30 c0       	rjmp	.+96     	; 0x1ae8 <bootUsbWrite+0xc4>
	{
		BLPAGE* blp = (BLPAGE*)(_buffer + 1);
		uint16_t page = blp->page;
    1a88:	40 91 13 01 	lds	r20, 0x0113
    1a8c:	50 91 14 01 	lds	r21, 0x0114
		// ページを消去
		cli();
    1a90:	f8 94       	cli
		boot_page_erase(page);
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	fa 01       	movw	r30, r20
    1a96:	80 93 57 00 	sts	0x0057, r24
    1a9a:	e8 95       	spm
		sei();
    1a9c:	78 94       	sei
		boot_spm_busy_wait();
    1a9e:	07 b6       	in	r0, 0x37	; 55
    1aa0:	00 fc       	sbrc	r0, 0
    1aa2:	fd cf       	rjmp	.-6      	; 0x1a9e <bootUsbWrite+0x7a>
		// ページをロード
		for(uint16_t i = 0; i < SPM_PAGESIZE; i += 2)
		{
			cli();
			boot_page_fill(page + i, *(uint16_t*)&blp->data[i]);
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
		sei();
		boot_spm_busy_wait();
		// ページをロード
		for(uint16_t i = 0; i < SPM_PAGESIZE; i += 2)
		{
			cli();
    1aaa:	f8 94       	cli
			boot_page_fill(page + i, *(uint16_t*)&blp->data[i]);
    1aac:	f9 01       	movw	r30, r18
    1aae:	e4 0f       	add	r30, r20
    1ab0:	f5 1f       	adc	r31, r21
    1ab2:	d9 01       	movw	r26, r18
    1ab4:	ab 5e       	subi	r26, 0xEB	; 235
    1ab6:	be 4f       	sbci	r27, 0xFE	; 254
    1ab8:	8d 91       	ld	r24, X+
    1aba:	9c 91       	ld	r25, X
    1abc:	0c 01       	movw	r0, r24
    1abe:	60 93 57 00 	sts	0x0057, r22
    1ac2:	e8 95       	spm
    1ac4:	11 24       	eor	r1, r1
			sei();
    1ac6:	78 94       	sei
		cli();
		boot_page_erase(page);
		sei();
		boot_spm_busy_wait();
		// ページをロード
		for(uint16_t i = 0; i < SPM_PAGESIZE; i += 2)
    1ac8:	2e 5f       	subi	r18, 0xFE	; 254
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	20 34       	cpi	r18, 0x40	; 64
    1ace:	31 05       	cpc	r19, r1
    1ad0:	61 f7       	brne	.-40     	; 0x1aaa <bootUsbWrite+0x86>
			cli();
			boot_page_fill(page + i, *(uint16_t*)&blp->data[i]);
			sei();
		}
		// ページを書き込み
		cli();
    1ad2:	f8 94       	cli
		boot_page_write(page);
    1ad4:	85 e0       	ldi	r24, 0x05	; 5
    1ad6:	fa 01       	movw	r30, r20
    1ad8:	80 93 57 00 	sts	0x0057, r24
    1adc:	e8 95       	spm
		sei();
    1ade:	78 94       	sei
		boot_spm_busy_wait();
    1ae0:	07 b6       	in	r0, 0x37	; 55
    1ae2:	00 fc       	sbrc	r0, 0
    1ae4:	fd cf       	rjmp	.-6      	; 0x1ae0 <bootUsbWrite+0xbc>
    1ae6:	81 e0       	ldi	r24, 0x01	; 1

		return 1;
	}
	
	return 0;
}
    1ae8:	1f 91       	pop	r17
    1aea:	08 95       	ret

00001aec <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
    1aec:	e9 e6       	ldi	r30, 0x69	; 105
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	83 60       	ori	r24, 0x03	; 3
    1af4:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    1af6:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1af8:	8b e4       	ldi	r24, 0x4B	; 75
    1afa:	80 93 63 01 	sts	0x0163, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    usbTxLen1 = USBPID_NAK;
    1afe:	8a e5       	ldi	r24, 0x5A	; 90
    1b00:	80 93 62 01 	sts	0x0162, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
    1b04:	08 95       	ret

00001b06 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
    1b0c:	60 91 73 01 	lds	r22, 0x0173
    1b10:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
    1b12:	67 fd       	sbrc	r22, 7
    1b14:	a3 c0       	rjmp	.+326    	; 0x1c5c <usbPoll+0x156>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
    1b16:	80 91 70 01 	lds	r24, 0x0170
    1b1a:	cc e0       	ldi	r28, 0x0C	; 12
    1b1c:	d0 e0       	ldi	r29, 0x00	; 0
    1b1e:	c8 1b       	sub	r28, r24
    1b20:	d1 09       	sbc	r29, r1
    1b22:	c9 58       	subi	r28, 0x89	; 137
    1b24:	de 4f       	sbci	r29, 0xFE	; 254
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
    1b26:	80 91 6f 01 	lds	r24, 0x016F
    1b2a:	8d 32       	cpi	r24, 0x2D	; 45
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <usbPoll+0x2a>
    1b2e:	84 c0       	rjmp	.+264    	; 0x1c38 <usbPoll+0x132>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
    1b30:	68 30       	cpi	r22, 0x08	; 8
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <usbPoll+0x30>
    1b34:	91 c0       	rjmp	.+290    	; 0x1c58 <usbPoll+0x152>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
    1b36:	83 ec       	ldi	r24, 0xC3	; 195
    1b38:	80 93 57 01 	sts	0x0157, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
    1b3c:	8a e5       	ldi	r24, 0x5A	; 90
    1b3e:	80 93 0e 01 	sts	0x010E, r24
        usbMsgFlags = 0;
    1b42:	10 92 11 01 	sts	0x0111, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
    1b46:	88 81       	ld	r24, Y
    1b48:	80 76       	andi	r24, 0x60	; 96
    1b4a:	21 f0       	breq	.+8      	; 0x1b54 <usbPoll+0x4e>
            replyLen = usbFunctionSetup(data);
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	dd de       	rcall	.-582    	; 0x190a <usbFunctionSetup>
    1b50:	28 2f       	mov	r18, r24
    1b52:	5f c0       	rjmp	.+190    	; 0x1c12 <usbPoll+0x10c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
    1b56:	10 92 60 01 	sts	0x0160, r1
    SWITCH_START(rq->bRequest)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
    1b5c:	88 23       	and	r24, r24
    1b5e:	21 f4       	brne	.+8      	; 0x1b68 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
    1b60:	10 92 61 01 	sts	0x0161, r1
    1b64:	22 e0       	ldi	r18, 0x02	; 2
    1b66:	4e c0       	rjmp	.+156    	; 0x1c04 <usbPoll+0xfe>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
    1b68:	85 30       	cpi	r24, 0x05	; 5
    1b6a:	19 f4       	brne	.+6      	; 0x1b72 <usbPoll+0x6c>
        usbNewDeviceAddr = value;
    1b6c:	90 93 74 01 	sts	0x0174, r25
    1b70:	48 c0       	rjmp	.+144    	; 0x1c02 <usbPoll+0xfc>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
    1b72:	86 30       	cpi	r24, 0x06	; 6
    1b74:	91 f5       	brne	.+100    	; 0x1bda <usbPoll+0xd4>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	31 f1       	breq	.+76     	; 0x1bc8 <usbPoll+0xc2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	21 f1       	breq	.+72     	; 0x1bc8 <usbPoll+0xc2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	f1 f4       	brne	.+60     	; 0x1bc0 <usbPoll+0xba>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
    1b84:	99 23       	and	r25, r25
    1b86:	41 f4       	brne	.+16     	; 0x1b98 <usbPoll+0x92>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
    1b88:	8d e8       	ldi	r24, 0x8D	; 141
    1b8a:	98 e1       	ldi	r25, 0x18	; 24
    1b8c:	90 93 72 01 	sts	0x0172, r25
    1b90:	80 93 71 01 	sts	0x0171, r24
    1b94:	24 e0       	ldi	r18, 0x04	; 4
    1b96:	1d c0       	rjmp	.+58     	; 0x1bd2 <usbPoll+0xcc>
        SWITCH_CASE(1)
    1b98:	91 30       	cpi	r25, 0x01	; 1
    1b9a:	41 f4       	brne	.+16     	; 0x1bac <usbPoll+0xa6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
    1b9c:	81 e9       	ldi	r24, 0x91	; 145
    1b9e:	98 e1       	ldi	r25, 0x18	; 24
    1ba0:	90 93 72 01 	sts	0x0172, r25
    1ba4:	80 93 71 01 	sts	0x0171, r24
    1ba8:	2a e2       	ldi	r18, 0x2A	; 42
    1baa:	13 c0       	rjmp	.+38     	; 0x1bd2 <usbPoll+0xcc>
        SWITCH_CASE(2)
    1bac:	92 30       	cpi	r25, 0x02	; 2
    1bae:	81 f4       	brne	.+32     	; 0x1bd0 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
    1bb0:	8b eb       	ldi	r24, 0xBB	; 187
    1bb2:	98 e1       	ldi	r25, 0x18	; 24
    1bb4:	90 93 72 01 	sts	0x0172, r25
    1bb8:	80 93 71 01 	sts	0x0171, r24
    1bbc:	2c e0       	ldi	r18, 0x0C	; 12
    1bbe:	09 c0       	rjmp	.+18     	; 0x1bd2 <usbPoll+0xcc>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
    1bc0:	81 32       	cpi	r24, 0x21	; 33
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <usbPoll+0xc2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
    1bc4:	82 32       	cpi	r24, 0x22	; 34
    1bc6:	21 f4       	brne	.+8      	; 0x1bd0 <usbPoll+0xca>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
    1bc8:	ce 01       	movw	r24, r28
    1bca:	9a de       	rcall	.-716    	; 0x1900 <usbFunctionDescriptor>
    1bcc:	28 2f       	mov	r18, r24
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <usbPoll+0xcc>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
    1bd2:	80 e4       	ldi	r24, 0x40	; 64
    1bd4:	80 93 11 01 	sts	0x0111, r24
    1bd8:	1c c0       	rjmp	.+56     	; 0x1c12 <usbPoll+0x10c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
    1bda:	88 30       	cpi	r24, 0x08	; 8
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <usbPoll+0xe0>
    1bde:	21 e0       	ldi	r18, 0x01	; 1
    1be0:	86 e7       	ldi	r24, 0x76	; 118
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	11 c0       	rjmp	.+34     	; 0x1c08 <usbPoll+0x102>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
    1be6:	89 30       	cpi	r24, 0x09	; 9
    1be8:	19 f4       	brne	.+6      	; 0x1bf0 <usbPoll+0xea>
        usbConfiguration = value;
    1bea:	90 93 76 01 	sts	0x0176, r25
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <usbPoll+0xfc>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
    1bf0:	8a 30       	cpi	r24, 0x0A	; 10
    1bf2:	11 f4       	brne	.+4      	; 0x1bf8 <usbPoll+0xf2>
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	06 c0       	rjmp	.+12     	; 0x1c04 <usbPoll+0xfe>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
    1bf8:	8b 30       	cpi	r24, 0x0B	; 11
    1bfa:	19 f4       	brne	.+6      	; 0x1c02 <usbPoll+0xfc>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
    1bfc:	8b e4       	ldi	r24, 0x4B	; 75
    1bfe:	80 93 63 01 	sts	0x0163, r24
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	80 e6       	ldi	r24, 0x60	; 96
    1c06:	91 e0       	ldi	r25, 0x01	; 1
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
    1c08:	90 93 72 01 	sts	0x0172, r25
    1c0c:	80 93 71 01 	sts	0x0171, r24
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <usbPoll+0x11e>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
    1c12:	2f 3f       	cpi	r18, 0xFF	; 255
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <usbPoll+0x11e>
            /* do some conditioning on replyLen */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
    1c16:	88 81       	ld	r24, Y
    1c18:	87 fd       	sbrc	r24, 7
                replyLen = rq->wLength.bytes[0];    /* IN transfers only */
    1c1a:	2e 81       	ldd	r18, Y+6	; 0x06
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
    1c1c:	80 e8       	ldi	r24, 0x80	; 128
    1c1e:	80 93 11 01 	sts	0x0111, r24
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <usbPoll+0x12a>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	88 23       	and	r24, r24
    1c28:	19 f4       	brne	.+6      	; 0x1c30 <usbPoll+0x12a>
    1c2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c2c:	82 17       	cp	r24, r18
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <usbPoll+0x12c>
    1c30:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
    1c32:	80 93 0f 01 	sts	0x010F, r24
    1c36:	10 c0       	rjmp	.+32     	; 0x1c58 <usbPoll+0x152>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
    1c38:	80 91 11 01 	lds	r24, 0x0111
    1c3c:	87 ff       	sbrs	r24, 7
    1c3e:	0c c0       	rjmp	.+24     	; 0x1c58 <usbPoll+0x152>
            uchar rval = usbFunctionWrite(data, len);
    1c40:	ce 01       	movw	r24, r28
    1c42:	6d de       	rcall	.-806    	; 0x191e <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
    1c44:	8f 3f       	cpi	r24, 0xFF	; 255
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <usbPoll+0x14a>
                usbTxLen = USBPID_STALL;
    1c48:	8e e1       	ldi	r24, 0x1E	; 30
    1c4a:	80 93 0e 01 	sts	0x010E, r24
    1c4e:	04 c0       	rjmp	.+8      	; 0x1c58 <usbPoll+0x152>
            }else if(rval != 0){    /* This was the final package */
    1c50:	88 23       	and	r24, r24
    1c52:	11 f0       	breq	.+4      	; 0x1c58 <usbPoll+0x152>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
    1c54:	10 92 0f 01 	sts	0x010F, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
    1c58:	10 92 73 01 	sts	0x0173, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
    1c5c:	80 91 0e 01 	lds	r24, 0x010E
    1c60:	84 ff       	sbrs	r24, 4
    1c62:	49 c0       	rjmp	.+146    	; 0x1cf6 <usbPoll+0x1f0>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
    1c64:	80 91 0f 01 	lds	r24, 0x010F
    1c68:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <usbPoll+0x168>
    1c6c:	44 c0       	rjmp	.+136    	; 0x1cf6 <usbPoll+0x1f0>
    1c6e:	18 2f       	mov	r17, r24
    1c70:	89 30       	cpi	r24, 0x09	; 9
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <usbPoll+0x170>
    1c74:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    1c76:	81 1b       	sub	r24, r17
    1c78:	80 93 0f 01 	sts	0x010F, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    1c7c:	80 91 57 01 	lds	r24, 0x0157
    1c80:	98 e8       	ldi	r25, 0x88	; 136
    1c82:	89 27       	eor	r24, r25
    1c84:	80 93 57 01 	sts	0x0157, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
    1c88:	11 23       	and	r17, r17
    1c8a:	41 f1       	breq	.+80     	; 0x1cdc <usbPoll+0x1d6>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
    1c8c:	20 91 71 01 	lds	r18, 0x0171
    1c90:	30 91 72 01 	lds	r19, 0x0172
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
    1c94:	80 91 11 01 	lds	r24, 0x0111
    1c98:	86 ff       	sbrs	r24, 6
    1c9a:	0d c0       	rjmp	.+26     	; 0x1cb6 <usbPoll+0x1b0>
    1c9c:	a8 e5       	ldi	r26, 0x58	; 88
    1c9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	e8 0f       	add	r30, r24
    1ca8:	f9 1f       	adc	r31, r25
    1caa:	e4 91       	lpm	r30, Z+
                    *data++ = c;
    1cac:	ed 93       	st	X+, r30
    1cae:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
    1cb0:	18 17       	cp	r17, r24
    1cb2:	c1 f7       	brne	.-16     	; 0x1ca4 <usbPoll+0x19e>
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <usbPoll+0x1c0>
    1cb6:	91 2f       	mov	r25, r17
    1cb8:	d9 01       	movw	r26, r18
    1cba:	e8 e5       	ldi	r30, 0x58	; 88
    1cbc:	f1 e0       	ldi	r31, 0x01	; 1
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
    1cbe:	8d 91       	ld	r24, X+
    1cc0:	81 93       	st	Z+, r24
                }while(--i);
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <usbPoll+0x1b8>
    1cc6:	11 50       	subi	r17, 0x01	; 1
    1cc8:	81 2f       	mov	r24, r17
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	1f 5f       	subi	r17, 0xFF	; 255
    1cce:	01 96       	adiw	r24, 0x01	; 1
    1cd0:	82 0f       	add	r24, r18
    1cd2:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
    1cd4:	90 93 72 01 	sts	0x0172, r25
    1cd8:	80 93 71 01 	sts	0x0171, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
    1cdc:	88 e5       	ldi	r24, 0x58	; 88
    1cde:	91 e0       	ldi	r25, 0x01	; 1
    1ce0:	61 2f       	mov	r22, r17
    1ce2:	4d d0       	rcall	.+154    	; 0x1d7e <usbCrc16Append>
        len += 4;           /* length including sync byte */
    1ce4:	61 2f       	mov	r22, r17
    1ce6:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
    1ce8:	6c 30       	cpi	r22, 0x0C	; 12
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <usbPoll+0x1ec>
            usbMsgLen = USB_NO_MSG;
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	80 93 0f 01 	sts	0x010F, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
    1cf2:	60 93 0e 01 	sts	0x010E, r22
    1cf6:	9a e0       	ldi	r25, 0x0A	; 10
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
    1cf8:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
    1cfa:	85 70       	andi	r24, 0x05	; 5
    1cfc:	31 f4       	brne	.+12     	; 0x1d0a <usbPoll+0x204>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
    1cfe:	91 50       	subi	r25, 0x01	; 1
    1d00:	d9 f7       	brne	.-10     	; 0x1cf8 <usbPoll+0x1f2>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            break;
    }
    if(i == 0){ /* RESET condition, called multiple times during reset */
        usbNewDeviceAddr = 0;
    1d02:	10 92 74 01 	sts	0x0174, r1
        usbDeviceAddr = 0;
    1d06:	10 92 6e 01 	sts	0x016E, r1
        usbResetStall();
        DBG1(0xff, 0, 0);
    }
    usbHandleResetHook(i);
}
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	1f 91       	pop	r17
    1d10:	08 95       	ret

00001d12 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    1d12:	1f 93       	push	r17
    1d14:	dc 01       	movw	r26, r24
    1d16:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
    1d18:	80 91 62 01 	lds	r24, 0x0162
    1d1c:	84 ff       	sbrs	r24, 4
    1d1e:	07 c0       	rjmp	.+14     	; 0x1d2e <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
    1d20:	80 91 63 01 	lds	r24, 0x0163
    1d24:	98 e8       	ldi	r25, 0x88	; 136
    1d26:	89 27       	eor	r24, r25
    1d28:	80 93 63 01 	sts	0x0163, r24
    1d2c:	03 c0       	rjmp	.+6      	; 0x1d34 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    1d2e:	8a e5       	ldi	r24, 0x5A	; 90
    1d30:	80 93 62 01 	sts	0x0162, r24
    1d34:	91 2f       	mov	r25, r17
    1d36:	e4 e6       	ldi	r30, 0x64	; 100
    1d38:	f1 e0       	ldi	r31, 0x01	; 1
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
    1d3e:	91 50       	subi	r25, 0x01	; 1
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
    1d42:	84 e6       	ldi	r24, 0x64	; 100
    1d44:	91 e0       	ldi	r25, 0x01	; 1
    1d46:	61 2f       	mov	r22, r17
    1d48:	1a d0       	rcall	.+52     	; 0x1d7e <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
    1d4a:	1c 5f       	subi	r17, 0xFC	; 252
    1d4c:	10 93 62 01 	sts	0x0162, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
    1d50:	1f 91       	pop	r17
    1d52:	08 95       	ret

00001d54 <usbCrc16>:
    1d54:	a8 2f       	mov	r26, r24
    1d56:	b9 2f       	mov	r27, r25
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	50 ea       	ldi	r21, 0xA0	; 160
    1d60:	60 95       	com	r22

00001d62 <crcByteLoop>:
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	58 f4       	brcc	.+22     	; 0x1d7c <crcReady>
    1d66:	2d 91       	ld	r18, X+
    1d68:	38 ef       	ldi	r19, 0xF8	; 248
    1d6a:	82 27       	eor	r24, r18

00001d6c <crcBitLoop>:
    1d6c:	97 95       	ror	r25
    1d6e:	87 95       	ror	r24
    1d70:	10 f0       	brcs	.+4      	; 0x1d76 <crcNoXor>
    1d72:	84 27       	eor	r24, r20
    1d74:	95 27       	eor	r25, r21

00001d76 <crcNoXor>:
    1d76:	3f 5f       	subi	r19, 0xFF	; 255
    1d78:	c8 f3       	brcs	.-14     	; 0x1d6c <crcBitLoop>
    1d7a:	f3 cf       	rjmp	.-26     	; 0x1d62 <crcByteLoop>

00001d7c <crcReady>:
    1d7c:	08 95       	ret

00001d7e <usbCrc16Append>:
    1d7e:	ea df       	rcall	.-44     	; 0x1d54 <usbCrc16>
    1d80:	8d 93       	st	X+, r24
    1d82:	9d 93       	st	X+, r25
    1d84:	08 95       	ret

00001d86 <__vector_1>:
    1d86:	cf 93       	push	r28
    1d88:	cf b7       	in	r28, 0x3f	; 63
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29

00001d8e <waitForJ>:
    1d8e:	48 9b       	sbis	0x09, 0	; 9
    1d90:	fe cf       	rjmp	.-4      	; 0x1d8e <waitForJ>

00001d92 <waitForK>:
    1d92:	48 9b       	sbis	0x09, 0	; 9
    1d94:	11 c0       	rjmp	.+34     	; 0x1db8 <foundK>
    1d96:	48 9b       	sbis	0x09, 0	; 9
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <foundK>
    1d9a:	48 9b       	sbis	0x09, 0	; 9
    1d9c:	0d c0       	rjmp	.+26     	; 0x1db8 <foundK>
    1d9e:	48 9b       	sbis	0x09, 0	; 9
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <foundK>
    1da2:	48 9b       	sbis	0x09, 0	; 9
    1da4:	09 c0       	rjmp	.+18     	; 0x1db8 <foundK>
    1da6:	48 9b       	sbis	0x09, 0	; 9
    1da8:	07 c0       	rjmp	.+14     	; 0x1db8 <foundK>
    1daa:	48 9b       	sbis	0x09, 0	; 9
    1dac:	05 c0       	rjmp	.+10     	; 0x1db8 <foundK>
    1dae:	48 9b       	sbis	0x09, 0	; 9
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <foundK>
    1db2:	48 9b       	sbis	0x09, 0	; 9
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <foundK>
    1db6:	83 c0       	rjmp	.+262    	; 0x1ebe <sofError>

00001db8 <foundK>:
    1db8:	6f 93       	push	r22
    1dba:	c0 91 70 01 	lds	r28, 0x0170
    1dbe:	dd 27       	eor	r29, r29
    1dc0:	c9 58       	subi	r28, 0x89	; 137
    1dc2:	de 4f       	sbci	r29, 0xFE	; 254
    1dc4:	2f 93       	push	r18
    1dc6:	20 e4       	ldi	r18, 0x40	; 64
    1dc8:	00 c0       	rjmp	.+0      	; 0x1dca <foundK+0x12>
    1dca:	65 e0       	ldi	r22, 0x05	; 5
    1dcc:	48 9b       	sbis	0x09, 0	; 9
    1dce:	03 c0       	rjmp	.+6      	; 0x1dd6 <haveTwoBitsK>
    1dd0:	2f 91       	pop	r18
    1dd2:	6f 91       	pop	r22
    1dd4:	de cf       	rjmp	.-68     	; 0x1d92 <waitForK>

00001dd6 <haveTwoBitsK>:
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	4f 93       	push	r20
    1ddc:	45 e5       	ldi	r20, 0x55	; 85
    1dde:	5f 93       	push	r21
    1de0:	55 e5       	ldi	r21, 0x55	; 85
    1de2:	3f 93       	push	r19
    1de4:	3b e0       	ldi	r19, 0x0B	; 11
    1de6:	14 e0       	ldi	r17, 0x04	; 4

00001de8 <bit0>:
    1de8:	09 b1       	in	r16, 0x09	; 9
    1dea:	05 70       	andi	r16, 0x05	; 5
    1dec:	2e c0       	rjmp	.+92     	; 0x1e4a <handleBit>

00001dee <b6checkUnstuff>:
    1dee:	6a 95       	dec	r22
    1df0:	c9 f0       	breq	.+50     	; 0x1e24 <unstuff6>

00001df2 <bit7>:
    1df2:	31 50       	subi	r19, 0x01	; 1
    1df4:	d8 f1       	brcs	.+118    	; 0x1e6c <overflow>
    1df6:	09 b1       	in	r16, 0x09	; 9
    1df8:	05 70       	andi	r16, 0x05	; 5
    1dfa:	01 13       	cpse	r16, r17
    1dfc:	0b c0       	rjmp	.+22     	; 0x1e14 <b7handle0>
    1dfe:	08 94       	sec
    1e00:	27 95       	ror	r18
    1e02:	29 93       	st	Y+, r18
    1e04:	20 e4       	ldi	r18, 0x40	; 64
    1e06:	55 55       	subi	r21, 0x55	; 85
    1e08:	00 f4       	brcc	.+0      	; 0x1e0a <bit7+0x18>
    1e0a:	6a 95       	dec	r22
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <bit0>
    1e0e:	01 e0       	ldi	r16, 0x01	; 1
    1e10:	69 b1       	in	r22, 0x09	; 9
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <unstuff>

00001e14 <b7handle0>:
    1e14:	10 2f       	mov	r17, r16
    1e16:	66 e0       	ldi	r22, 0x06	; 6
    1e18:	26 95       	lsr	r18
    1e1a:	29 93       	st	Y+, r18
    1e1c:	20 e4       	ldi	r18, 0x40	; 64
    1e1e:	55 55       	subi	r21, 0x55	; 85
    1e20:	18 f3       	brcs	.-58     	; 0x1de8 <bit0>
    1e22:	e2 cf       	rjmp	.-60     	; 0x1de8 <bit0>

00001e24 <unstuff6>:
    1e24:	0f ef       	ldi	r16, 0xFF	; 255
    1e26:	69 b1       	in	r22, 0x09	; 9
	...

00001e2a <unstuff>:
    1e2a:	16 2f       	mov	r17, r22
    1e2c:	45 55       	subi	r20, 0x55	; 85
    1e2e:	00 f0       	brcs	.+0      	; 0x1e30 <unstuff+0x6>
    1e30:	40 40       	sbci	r20, 0x00	; 0
    1e32:	66 e0       	ldi	r22, 0x06	; 6
    1e34:	15 70       	andi	r17, 0x05	; 5
    1e36:	00 30       	cpi	r16, 0x00	; 0
    1e38:	e2 f2       	brmi	.-72     	; 0x1df2 <bit7>
    1e3a:	21 f0       	breq	.+8      	; 0x1e44 <bitloop>
    1e3c:	00 00       	nop
    1e3e:	09 b1       	in	r16, 0x09	; 9
    1e40:	05 70       	andi	r16, 0x05	; 5
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <handleBit>

00001e44 <bitloop>:
    1e44:	09 b1       	in	r16, 0x09	; 9
    1e46:	05 70       	andi	r16, 0x05	; 5
    1e48:	a9 f0       	breq	.+42     	; 0x1e74 <se0>

00001e4a <handleBit>:
    1e4a:	01 13       	cpse	r16, r17
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <handle0>
    1e4e:	08 94       	sec
    1e50:	27 95       	ror	r18
    1e52:	68 f2       	brcs	.-102    	; 0x1dee <b6checkUnstuff>
    1e54:	00 c0       	rjmp	.+0      	; 0x1e56 <handleBit+0xc>
    1e56:	6a 95       	dec	r22
    1e58:	a9 f7       	brne	.-22     	; 0x1e44 <bitloop>
    1e5a:	00 e0       	ldi	r16, 0x00	; 0
    1e5c:	69 b1       	in	r22, 0x09	; 9
    1e5e:	e5 cf       	rjmp	.-54     	; 0x1e2a <unstuff>

00001e60 <handle0>:
    1e60:	10 2f       	mov	r17, r16
    1e62:	66 e0       	ldi	r22, 0x06	; 6
    1e64:	26 95       	lsr	r18
    1e66:	28 f2       	brcs	.-118    	; 0x1df2 <bit7>
    1e68:	00 00       	nop
    1e6a:	ec cf       	rjmp	.-40     	; 0x1e44 <bitloop>

00001e6c <overflow>:
    1e6c:	11 e0       	ldi	r17, 0x01	; 1
    1e6e:	1c bb       	out	0x1c, r17	; 28

00001e70 <ignorePacket>:
    1e70:	00 27       	eor	r16, r16
    1e72:	19 c0       	rjmp	.+50     	; 0x1ea6 <handleSetupOrOut>

00001e74 <se0>:
    1e74:	3b 50       	subi	r19, 0x0B	; 11
    1e76:	31 95       	neg	r19
    1e78:	c3 1b       	sub	r28, r19
    1e7a:	d0 40       	sbci	r29, 0x00	; 0
    1e7c:	11 e0       	ldi	r17, 0x01	; 1
    1e7e:	1c bb       	out	0x1c, r17	; 28
    1e80:	08 81       	ld	r16, Y
    1e82:	03 3c       	cpi	r16, 0xC3	; 195
    1e84:	09 f1       	breq	.+66     	; 0x1ec8 <handleData>
    1e86:	0b 34       	cpi	r16, 0x4B	; 75
    1e88:	f9 f0       	breq	.+62     	; 0x1ec8 <handleData>
    1e8a:	20 91 6e 01 	lds	r18, 0x016E
    1e8e:	19 81       	ldd	r17, Y+1	; 0x01
    1e90:	11 0f       	add	r17, r17
    1e92:	12 13       	cpse	r17, r18
    1e94:	ed cf       	rjmp	.-38     	; 0x1e70 <ignorePacket>
    1e96:	4a 81       	ldd	r20, Y+2	; 0x02
    1e98:	44 1f       	adc	r20, r20
    1e9a:	09 36       	cpi	r16, 0x69	; 105
    1e9c:	51 f1       	breq	.+84     	; 0x1ef2 <handleIn>
    1e9e:	0d 32       	cpi	r16, 0x2D	; 45
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <handleSetupOrOut>
    1ea2:	01 3e       	cpi	r16, 0xE1	; 225
    1ea4:	29 f7       	brne	.-54     	; 0x1e70 <ignorePacket>

00001ea6 <handleSetupOrOut>:
    1ea6:	00 93 75 01 	sts	0x0175, r16

00001eaa <doReturn>:
    1eaa:	3f 91       	pop	r19
    1eac:	5f 91       	pop	r21
    1eae:	4f 91       	pop	r20
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	2f 91       	pop	r18
    1eb6:	6f 91       	pop	r22
    1eb8:	cc b3       	in	r28, 0x1c	; 28
    1eba:	c0 fd       	sbrc	r28, 0
    1ebc:	68 cf       	rjmp	.-304    	; 0x1d8e <waitForJ>

00001ebe <sofError>:
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	cf bf       	out	0x3f, r28	; 63
    1ec4:	cf 91       	pop	r28
    1ec6:	18 95       	reti

00001ec8 <handleData>:
    1ec8:	00 91 75 01 	lds	r16, 0x0175
    1ecc:	00 23       	and	r16, r16
    1ece:	69 f3       	breq	.-38     	; 0x1eaa <doReturn>
    1ed0:	10 91 73 01 	lds	r17, 0x0173
    1ed4:	11 23       	and	r17, r17
    1ed6:	81 f5       	brne	.+96     	; 0x1f38 <sendNakAndReti>
    1ed8:	34 30       	cpi	r19, 0x04	; 4
    1eda:	82 f1       	brmi	.+96     	; 0x1f3c <sendAckAndReti>
    1edc:	30 93 73 01 	sts	0x0173, r19
    1ee0:	00 93 6f 01 	sts	0x016F, r16
    1ee4:	10 91 70 01 	lds	r17, 0x0170
    1ee8:	3b e0       	ldi	r19, 0x0B	; 11
    1eea:	31 1b       	sub	r19, r17
    1eec:	30 93 70 01 	sts	0x0170, r19
    1ef0:	25 c0       	rjmp	.+74     	; 0x1f3c <sendAckAndReti>

00001ef2 <handleIn>:
    1ef2:	00 91 73 01 	lds	r16, 0x0173
    1ef6:	01 30       	cpi	r16, 0x01	; 1
    1ef8:	fc f4       	brge	.+62     	; 0x1f38 <sendNakAndReti>
    1efa:	0a e5       	ldi	r16, 0x5A	; 90
    1efc:	4f 70       	andi	r20, 0x0F	; 15
    1efe:	49 f4       	brne	.+18     	; 0x1f12 <handleIn1>
    1f00:	30 91 0e 01 	lds	r19, 0x010E
    1f04:	34 fd       	sbrc	r19, 4
    1f06:	1b c0       	rjmp	.+54     	; 0x1f3e <sendCntAndReti>
    1f08:	00 93 0e 01 	sts	0x010E, r16
    1f0c:	c7 e5       	ldi	r28, 0x57	; 87
    1f0e:	d1 e0       	ldi	r29, 0x01	; 1
    1f10:	1a c0       	rjmp	.+52     	; 0x1f46 <usbSendAndReti>

00001f12 <handleIn1>:
    1f12:	30 91 62 01 	lds	r19, 0x0162
    1f16:	34 fd       	sbrc	r19, 4
    1f18:	12 c0       	rjmp	.+36     	; 0x1f3e <sendCntAndReti>
    1f1a:	00 93 62 01 	sts	0x0162, r16
    1f1e:	c3 e6       	ldi	r28, 0x63	; 99
    1f20:	d1 e0       	ldi	r29, 0x01	; 1
    1f22:	11 c0       	rjmp	.+34     	; 0x1f46 <usbSendAndReti>

00001f24 <bitstuffN>:
    1f24:	05 27       	eor	r16, r21
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	00 c0       	rjmp	.+0      	; 0x1f2a <bitstuffN+0x6>
    1f2a:	0b b9       	out	0x0b, r16	; 11
    1f2c:	19 c0       	rjmp	.+50     	; 0x1f60 <didStuffN>

00001f2e <bitstuff7>:
    1f2e:	05 27       	eor	r16, r21
    1f30:	10 e0       	ldi	r17, 0x00	; 0
    1f32:	22 1f       	adc	r18, r18
    1f34:	00 c0       	rjmp	.+0      	; 0x1f36 <bitstuff7+0x8>
    1f36:	1d c0       	rjmp	.+58     	; 0x1f72 <didStuff7>

00001f38 <sendNakAndReti>:
    1f38:	4a e5       	ldi	r20, 0x5A	; 90
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <sendX3AndReti>

00001f3c <sendAckAndReti>:
    1f3c:	32 ed       	ldi	r19, 0xD2	; 210

00001f3e <sendCntAndReti>:
    1f3e:	43 2f       	mov	r20, r19

00001f40 <sendX3AndReti>:
    1f40:	c4 e1       	ldi	r28, 0x14	; 20
    1f42:	d0 e0       	ldi	r29, 0x00	; 0
    1f44:	32 e0       	ldi	r19, 0x02	; 2

00001f46 <usbSendAndReti>:
    1f46:	1a b1       	in	r17, 0x0a	; 10
    1f48:	15 60       	ori	r17, 0x05	; 5
    1f4a:	58 9a       	sbi	0x0b, 0	; 11
    1f4c:	0b b1       	in	r16, 0x0b	; 11
    1f4e:	1a b9       	out	0x0a, r17	; 10
    1f50:	55 e0       	ldi	r21, 0x05	; 5
    1f52:	20 e8       	ldi	r18, 0x80	; 128

00001f54 <txByteLoop>:
    1f54:	69 e4       	ldi	r22, 0x49	; 73

00001f56 <txBitLoop>:
    1f56:	20 ff       	sbrs	r18, 0
    1f58:	05 27       	eor	r16, r21
    1f5a:	0b b9       	out	0x0b, r16	; 11
    1f5c:	27 95       	ror	r18
    1f5e:	17 95       	ror	r17

00001f60 <didStuffN>:
    1f60:	00 c0       	rjmp	.+0      	; 0x1f62 <didStuffN+0x2>
    1f62:	00 00       	nop
    1f64:	1c 3f       	cpi	r17, 0xFC	; 252
    1f66:	f0 f6       	brcc	.-68     	; 0x1f24 <bitstuffN>
    1f68:	66 95       	lsr	r22
    1f6a:	a8 f7       	brcc	.-22     	; 0x1f56 <txBitLoop>
    1f6c:	a1 f7       	brne	.-24     	; 0x1f56 <txBitLoop>
    1f6e:	20 ff       	sbrs	r18, 0
    1f70:	05 27       	eor	r16, r21

00001f72 <didStuff7>:
    1f72:	0b b9       	out	0x0b, r16	; 11
    1f74:	27 95       	ror	r18
    1f76:	17 95       	ror	r17
    1f78:	00 00       	nop
    1f7a:	1c 3f       	cpi	r17, 0xFC	; 252
    1f7c:	c0 f6       	brcc	.-80     	; 0x1f2e <bitstuff7>
    1f7e:	29 91       	ld	r18, Y+
    1f80:	3a 95       	dec	r19
    1f82:	41 f7       	brne	.-48     	; 0x1f54 <txByteLoop>
    1f84:	0a 7f       	andi	r16, 0xFA	; 250
    1f86:	10 91 74 01 	lds	r17, 0x0174
    1f8a:	11 0f       	add	r17, r17
    1f8c:	0b b9       	out	0x0b, r16	; 11
    1f8e:	c6 51       	subi	r28, 0x16	; 22
    1f90:	d0 40       	sbci	r29, 0x00	; 0
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <skipAddrAssign>
    1f94:	10 93 6e 01 	sts	0x016E, r17

00001f98 <skipAddrAssign>:
    1f98:	11 e0       	ldi	r17, 0x01	; 1
    1f9a:	1c bb       	out	0x1c, r17	; 28
    1f9c:	01 60       	ori	r16, 0x01	; 1
    1f9e:	1a b1       	in	r17, 0x0a	; 10
    1fa0:	1a 7f       	andi	r17, 0xFA	; 250
    1fa2:	40 2f       	mov	r20, r16
    1fa4:	4a 7f       	andi	r20, 0xFA	; 250
    1fa6:	55 e0       	ldi	r21, 0x05	; 5

00001fa8 <se0Delay>:
    1fa8:	5a 95       	dec	r21
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <se0Delay>
    1fac:	0b b9       	out	0x0b, r16	; 11
    1fae:	1a b9       	out	0x0a, r17	; 10
    1fb0:	4b b9       	out	0x0b, r20	; 11
    1fb2:	7b cf       	rjmp	.-266    	; 0x1eaa <doReturn>

00001fb4 <memcpy>:
    1fb4:	fb 01       	movw	r30, r22
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <memcpy+0xa>
    1fba:	01 90       	ld	r0, Z+
    1fbc:	0d 92       	st	X+, r0
    1fbe:	41 50       	subi	r20, 0x01	; 1
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	d8 f7       	brcc	.-10     	; 0x1fba <memcpy+0x6>
    1fc4:	08 95       	ret

00001fc6 <_exit>:
    1fc6:	f8 94       	cli

00001fc8 <__stop_program>:
    1fc8:	ff cf       	rjmp	.-2      	; 0x1fc8 <__stop_program>
